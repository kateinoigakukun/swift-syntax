//// Automatically generated by generate-swiftsyntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension ArrayExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftSquare
    }
    set {
      unexpectedBeforeLeftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftSquare")
  public var leftSquareBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndElements")
  public var unexpectedBetweenLeftSquareBracketAndElements: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndElements
    }
    set {
      unexpectedBetweenLeftSquareAndElements = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenElementsAndRightSquare")
  public var unexpectedBetweenElementsAndRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenElementsAndRightSquare
    }
    set {
      unexpectedBetweenElementsAndRightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightSquare")
  public var rightSquareBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightSquare
    }
    set {
      unexpectedAfterRightSquare = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with leftSquareBracket, rightSquareBracket argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? = nil,
      leftSquareBracket: TokenSyntax = .leftSquareToken(),
      _ unexpectedBetweenLeftSquareBracketAndElements: UnexpectedNodesSyntax? = nil,
      elements: ArrayElementListSyntax,
      _ unexpectedBetweenElementsAndRightSquareBracket: UnexpectedNodesSyntax? = nil,
      rightSquareBracket: TokenSyntax = .rightSquareToken(),
      _ unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftSquareBracket, 
        leftSquare: leftSquareBracket, 
        unexpectedBetweenLeftSquareBracketAndElements, 
        elements: elements, 
        unexpectedBetweenElementsAndRightSquareBracket, 
        rightSquare: rightSquareBracket, 
        unexpectedAfterRightSquareBracket, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension ArrayTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftSquare
    }
    set {
      unexpectedBeforeLeftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftSquare")
  public var leftSquareBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndElementType")
  public var unexpectedBetweenLeftSquareBracketAndElementType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndElementType
    }
    set {
      unexpectedBetweenLeftSquareAndElementType = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenElementTypeAndRightSquare")
  public var unexpectedBetweenElementTypeAndRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenElementTypeAndRightSquare
    }
    set {
      unexpectedBetweenElementTypeAndRightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightSquare")
  public var rightSquareBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightSquare
    }
    set {
      unexpectedAfterRightSquare = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with leftSquareBracket, rightSquareBracket argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? = nil,
      leftSquareBracket: TokenSyntax = .leftSquareToken(),
      _ unexpectedBetweenLeftSquareBracketAndElementType: UnexpectedNodesSyntax? = nil,
      elementType: some TypeSyntaxProtocol,
      _ unexpectedBetweenElementTypeAndRightSquareBracket: UnexpectedNodesSyntax? = nil,
      rightSquareBracket: TokenSyntax = .rightSquareToken(),
      _ unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftSquareBracket, 
        leftSquare: leftSquareBracket, 
        unexpectedBetweenLeftSquareBracketAndElementType, 
        elementType: elementType, 
        unexpectedBetweenElementTypeAndRightSquareBracket, 
        rightSquare: rightSquareBracket, 
        unexpectedAfterRightSquareBracket, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension AvailabilityConditionSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndAvailabilityArguments")
  public var unexpectedBetweenLeftParenAndAvailabilitySpec: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndAvailabilityArguments
    }
    set {
      unexpectedBetweenLeftParenAndAvailabilityArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "availabilityArguments")
  public var availabilitySpec: AvailabilitySpecListSyntax {
    get {
      return availabilityArguments
    }
    set {
      availabilityArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAvailabilityArgumentsAndRightParen")
  public var unexpectedBetweenAvailabilitySpecAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAvailabilityArgumentsAndRightParen
    }
    set {
      unexpectedBetweenAvailabilityArgumentsAndRightParen = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with availabilitySpec argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAvailabilityKeyword: UnexpectedNodesSyntax? = nil,
      availabilityKeyword: TokenSyntax,
      _ unexpectedBetweenAvailabilityKeywordAndLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax = .leftParenToken(),
      _ unexpectedBetweenLeftParenAndAvailabilitySpec: UnexpectedNodesSyntax? = nil,
      availabilitySpec: AvailabilitySpecListSyntax,
      _ unexpectedBetweenAvailabilitySpecAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax = .rightParenToken(),
      _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAvailabilityKeyword, 
        availabilityKeyword: availabilityKeyword, 
        unexpectedBetweenAvailabilityKeywordAndLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndAvailabilitySpec, 
        availabilityArguments: availabilitySpec, 
        unexpectedBetweenAvailabilitySpecAndRightParen, 
        rightParen: rightParen, 
        unexpectedAfterRightParen, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension AvailabilityEntrySyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndAvailabilityArguments")
  public var unexpectedBetweenColonAndAvailabilityList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndAvailabilityArguments
    }
    set {
      unexpectedBetweenColonAndAvailabilityArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "availabilityArguments")
  public var availabilityList: AvailabilitySpecListSyntax {
    get {
      return availabilityArguments
    }
    set {
      availabilityArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "addAvailabilityArgument")
  public func addAvailability(_ element: AvailabilityArgumentSyntax) -> AvailabilityEntrySyntax {
    return addAvailabilityArgument(element)
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAvailabilityArgumentsAndSemicolon")
  public var unexpectedBetweenAvailabilityListAndSemicolon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAvailabilityArgumentsAndSemicolon
    }
    set {
      unexpectedBetweenAvailabilityArgumentsAndSemicolon = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with availabilityList argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLabel: UnexpectedNodesSyntax? = nil,
      label: TokenSyntax = .keyword(.availability),
      _ unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndAvailabilityList: UnexpectedNodesSyntax? = nil,
      availabilityList: AvailabilitySpecListSyntax,
      _ unexpectedBetweenAvailabilityListAndSemicolon: UnexpectedNodesSyntax? = nil,
      semicolon: TokenSyntax = .semicolonToken(),
      _ unexpectedAfterSemicolon: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLabel, 
        label: label, 
        unexpectedBetweenLabelAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndAvailabilityList, 
        availabilityArguments: availabilityList, 
        unexpectedBetweenAvailabilityListAndSemicolon, 
        semicolon: semicolon, 
        unexpectedAfterSemicolon, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension BackDeployedAttributeSpecListSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndPlatforms")
  public var unexpectedBetweenColonAndVersionList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndPlatforms
    }
    set {
      unexpectedBetweenColonAndPlatforms = newValue
    }
  }
  
  @available(*, deprecated, renamed: "platforms")
  public var versionList: AvailabilityVersionRestrictionListSyntax {
    get {
      return platforms
    }
    set {
      platforms = newValue
    }
  }
  
  @available(*, deprecated, renamed: "addPlatform")
  public func addAvailability(_ element: AvailabilityVersionRestrictionListEntrySyntax) -> BackDeployedAttributeSpecListSyntax {
    return addPlatform(element)
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterPlatforms")
  public var unexpectedAfterVersionList: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterPlatforms
    }
    set {
      unexpectedAfterPlatforms = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with versionList argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeBeforeLabel: UnexpectedNodesSyntax? = nil,
      beforeLabel: TokenSyntax = .keyword(.before),
      _ unexpectedBetweenBeforeLabelAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndVersionList: UnexpectedNodesSyntax? = nil,
      versionList: AvailabilityVersionRestrictionListSyntax,
      _ unexpectedAfterVersionList: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeBeforeLabel, 
        beforeLabel: beforeLabel, 
        unexpectedBetweenBeforeLabelAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndVersionList, 
        platforms: versionList, 
        unexpectedAfterVersionList, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension DictionaryTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftSquare
    }
    set {
      unexpectedBeforeLeftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftSquare")
  public var leftSquareBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndKeyType")
  public var unexpectedBetweenLeftSquareBracketAndKeyType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndKeyType
    }
    set {
      unexpectedBetweenLeftSquareAndKeyType = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenValueTypeAndRightSquare")
  public var unexpectedBetweenValueTypeAndRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenValueTypeAndRightSquare
    }
    set {
      unexpectedBetweenValueTypeAndRightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightSquare")
  public var rightSquareBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightSquare
    }
    set {
      unexpectedAfterRightSquare = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with leftSquareBracket, rightSquareBracket argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? = nil,
      leftSquareBracket: TokenSyntax = .leftSquareToken(),
      _ unexpectedBetweenLeftSquareBracketAndKeyType: UnexpectedNodesSyntax? = nil,
      keyType: some TypeSyntaxProtocol,
      _ unexpectedBetweenKeyTypeAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndValueType: UnexpectedNodesSyntax? = nil,
      valueType: some TypeSyntaxProtocol,
      _ unexpectedBetweenValueTypeAndRightSquareBracket: UnexpectedNodesSyntax? = nil,
      rightSquareBracket: TokenSyntax = .rightSquareToken(),
      _ unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftSquareBracket, 
        leftSquare: leftSquareBracket, 
        unexpectedBetweenLeftSquareBracketAndKeyType, 
        keyType: keyType, 
        unexpectedBetweenKeyTypeAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndValueType, 
        valueType: valueType, 
        unexpectedBetweenValueTypeAndRightSquareBracket, 
        rightSquare: rightSquareBracket, 
        unexpectedAfterRightSquareBracket, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension EditorPlaceholderDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndPlaceholder")
  public var unexpectedBetweenModifiersAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenModifiersAndPlaceholder
    }
    set {
      unexpectedBetweenModifiersAndPlaceholder = newValue
    }
  }
  
  @available(*, deprecated, renamed: "placeholder")
  public var identifier: TokenSyntax {
    get {
      return placeholder
    }
    set {
      placeholder = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterPlaceholder")
  public var unexpectedAfterIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterPlaceholder
    }
    set {
      unexpectedAfterPlaceholder = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with identifier argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
      attributes: AttributeListSyntax? = nil,
      _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
      modifiers: ModifierListSyntax? = nil,
      _ unexpectedBetweenModifiersAndIdentifier: UnexpectedNodesSyntax? = nil,
      identifier: TokenSyntax,
      _ unexpectedAfterIdentifier: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAttributes, 
        attributes: attributes, 
        unexpectedBetweenAttributesAndModifiers, 
        modifiers: modifiers, 
        unexpectedBetweenModifiersAndIdentifier, 
        placeholder: identifier, 
        unexpectedAfterIdentifier, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension EnumDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenIdentifierAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameters: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenIdentifierAndGenericParameterClause
    }
    set {
      unexpectedBetweenIdentifierAndGenericParameterClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "genericParameterClause")
  public var genericParameters: GenericParameterClauseSyntax? {
    get {
      return genericParameterClause
    }
    set {
      genericParameterClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenGenericParameterClauseAndInheritanceClause")
  public var unexpectedBetweenGenericParametersAndInheritanceClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenGenericParameterClauseAndInheritanceClause
    }
    set {
      unexpectedBetweenGenericParameterClauseAndInheritanceClause = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with genericParameters argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
      attributes: AttributeListSyntax? = nil,
      _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
      modifiers: ModifierListSyntax? = nil,
      _ unexpectedBetweenModifiersAndEnumKeyword: UnexpectedNodesSyntax? = nil,
      enumKeyword: TokenSyntax = .keyword(.enum),
      _ unexpectedBetweenEnumKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
      identifier: TokenSyntax,
      _ unexpectedBetweenIdentifierAndGenericParameters: UnexpectedNodesSyntax? = nil,
      genericParameters: GenericParameterClauseSyntax? = nil,
      _ unexpectedBetweenGenericParametersAndInheritanceClause: UnexpectedNodesSyntax? = nil,
      inheritanceClause: TypeInheritanceClauseSyntax? = nil,
      _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
      genericWhereClause: GenericWhereClauseSyntax? = nil,
      _ unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? = nil,
      memberBlock: MemberDeclBlockSyntax,
      _ unexpectedAfterMemberBlock: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAttributes, 
        attributes: attributes, 
        unexpectedBetweenAttributesAndModifiers, 
        modifiers: modifiers, 
        unexpectedBetweenModifiersAndEnumKeyword, 
        enumKeyword: enumKeyword, 
        unexpectedBetweenEnumKeywordAndIdentifier, 
        identifier: identifier, 
        unexpectedBetweenIdentifierAndGenericParameters, 
        genericParameterClause: genericParameters, 
        unexpectedBetweenGenericParametersAndInheritanceClause, 
        inheritanceClause: inheritanceClause, 
        unexpectedBetweenInheritanceClauseAndGenericWhereClause, 
        genericWhereClause: genericWhereClause, 
        unexpectedBetweenGenericWhereClauseAndMemberBlock, 
        memberBlock: memberBlock, 
        unexpectedAfterMemberBlock, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension FunctionTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndParameters")
  public var unexpectedBetweenLeftParenAndarguments: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndParameters
    }
    set {
      unexpectedBetweenLeftParenAndParameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "parameters")
  public var arguments: TupleTypeElementListSyntax {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "addParameter")
  public func addArgument(_ element: TupleTypeElementSyntax) -> FunctionTypeSyntax {
    return addParameter(element)
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndRightParen")
  public var unexpectedBetweenargumentsAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersAndRightParen
    }
    set {
      unexpectedBetweenParametersAndRightParen = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with arguments argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax = .leftParenToken(),
      _ unexpectedBetweenLeftParenAndarguments: UnexpectedNodesSyntax? = nil,
      arguments: TupleTypeElementListSyntax,
      _ unexpectedBetweenargumentsAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax = .rightParenToken(),
      _ unexpectedBetweenRightParenAndEffectSpecifiers: UnexpectedNodesSyntax? = nil,
      effectSpecifiers: TypeEffectSpecifiersSyntax? = nil,
      _ unexpectedBetweenEffectSpecifiersAndOutput: UnexpectedNodesSyntax? = nil,
      output: ReturnClauseSyntax,
      _ unexpectedAfterOutput: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndarguments, 
        parameters: arguments, 
        unexpectedBetweenargumentsAndRightParen, 
        rightParen: rightParen, 
        unexpectedBetweenRightParenAndEffectSpecifiers, 
        effectSpecifiers: effectSpecifiers, 
        unexpectedBetweenEffectSpecifiersAndOutput, 
        output: output, 
        unexpectedAfterOutput, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension GenericParameterClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftAngleBracketAndParameters")
  public var unexpectedBetweenLeftAngleBracketAndGenericParameterList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftAngleBracketAndParameters
    }
    set {
      unexpectedBetweenLeftAngleBracketAndParameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "parameters")
  public var genericParameterList: GenericParameterListSyntax {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "addParameter")
  public func addGenericParameter(_ element: GenericParameterSyntax) -> GenericParameterClauseSyntax {
    return addParameter(element)
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndGenericWhereClause")
  public var unexpectedBetweenGenericParameterListAndGenericWhereClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersAndGenericWhereClause
    }
    set {
      unexpectedBetweenParametersAndGenericWhereClause = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with genericParameterList argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? = nil,
      leftAngleBracket: TokenSyntax = .leftAngleToken(),
      _ unexpectedBetweenLeftAngleBracketAndGenericParameterList: UnexpectedNodesSyntax? = nil,
      genericParameterList: GenericParameterListSyntax,
      _ unexpectedBetweenGenericParameterListAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
      genericWhereClause: GenericWhereClauseSyntax? = nil,
      _ unexpectedBetweenGenericWhereClauseAndRightAngleBracket: UnexpectedNodesSyntax? = nil,
      rightAngleBracket: TokenSyntax = .rightAngleToken(),
      _ unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftAngleBracket, 
        leftAngleBracket: leftAngleBracket, 
        unexpectedBetweenLeftAngleBracketAndGenericParameterList, 
        parameters: genericParameterList, 
        unexpectedBetweenGenericParameterListAndGenericWhereClause, 
        genericWhereClause: genericWhereClause, 
        unexpectedBetweenGenericWhereClauseAndRightAngleBracket, 
        rightAngleBracket: rightAngleBracket, 
        unexpectedAfterRightAngleBracket, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension ImportDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndImportKeyword")
  public var unexpectedBetweenModifiersAndImportTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenModifiersAndImportKeyword
    }
    set {
      unexpectedBetweenModifiersAndImportKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "importKeyword")
  public var importTok: TokenSyntax {
    get {
      return importKeyword
    }
    set {
      importKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenImportKeywordAndImportKind")
  public var unexpectedBetweenImportTokAndImportKind: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenImportKeywordAndImportKind
    }
    set {
      unexpectedBetweenImportKeywordAndImportKind = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with importTok argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
      attributes: AttributeListSyntax? = nil,
      _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
      modifiers: ModifierListSyntax? = nil,
      _ unexpectedBetweenModifiersAndImportTok: UnexpectedNodesSyntax? = nil,
      importTok: TokenSyntax = .keyword(.import),
      _ unexpectedBetweenImportTokAndImportKind: UnexpectedNodesSyntax? = nil,
      importKind: TokenSyntax? = nil,
      _ unexpectedBetweenImportKindAndPath: UnexpectedNodesSyntax? = nil,
      path: ImportPathSyntax,
      _ unexpectedAfterPath: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAttributes, 
        attributes: attributes, 
        unexpectedBetweenAttributesAndModifiers, 
        modifiers: modifiers, 
        unexpectedBetweenModifiersAndImportTok, 
        importKeyword: importTok, 
        unexpectedBetweenImportTokAndImportKind, 
        importKind: importKind, 
        unexpectedBetweenImportKindAndPath, 
        path: path, 
        unexpectedAfterPath, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension NamedOpaqueReturnTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeGenericParameterClause")
  public var unexpectedBeforeGenericParameters: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeGenericParameterClause
    }
    set {
      unexpectedBeforeGenericParameterClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "genericParameterClause")
  public var genericParameters: GenericParameterClauseSyntax {
    get {
      return genericParameterClause
    }
    set {
      genericParameterClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenGenericParameterClauseAndBaseType")
  public var unexpectedBetweenGenericParametersAndBaseType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenGenericParameterClauseAndBaseType
    }
    set {
      unexpectedBetweenGenericParameterClauseAndBaseType = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with genericParameters argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeGenericParameters: UnexpectedNodesSyntax? = nil,
      genericParameters: GenericParameterClauseSyntax,
      _ unexpectedBetweenGenericParametersAndBaseType: UnexpectedNodesSyntax? = nil,
      baseType: some TypeSyntaxProtocol,
      _ unexpectedAfterBaseType: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeGenericParameters, 
        genericParameterClause: genericParameters, 
        unexpectedBetweenGenericParametersAndBaseType, 
        baseType: baseType, 
        unexpectedAfterBaseType, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension PrecedenceGroupRelationSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeHigherThanOrLowerThanKeyword")
  public var unexpectedBeforeHigherThanOrLowerThan: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeHigherThanOrLowerThanKeyword
    }
    set {
      unexpectedBeforeHigherThanOrLowerThanKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "higherThanOrLowerThanKeyword")
  public var higherThanOrLowerThan: TokenSyntax {
    get {
      return higherThanOrLowerThanKeyword
    }
    set {
      higherThanOrLowerThanKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenHigherThanOrLowerThanKeywordAndColon")
  public var unexpectedBetweenHigherThanOrLowerThanAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenHigherThanOrLowerThanKeywordAndColon
    }
    set {
      unexpectedBetweenHigherThanOrLowerThanKeywordAndColon = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with higherThanOrLowerThan argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeHigherThanOrLowerThan: UnexpectedNodesSyntax? = nil,
      higherThanOrLowerThan: TokenSyntax,
      _ unexpectedBetweenHigherThanOrLowerThanAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndOtherNames: UnexpectedNodesSyntax? = nil,
      otherNames: PrecedenceGroupNameListSyntax,
      _ unexpectedAfterOtherNames: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeHigherThanOrLowerThan, 
        higherThanOrLowerThanKeyword: higherThanOrLowerThan, 
        unexpectedBetweenHigherThanOrLowerThanAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndOtherNames, 
        otherNames: otherNames, 
        unexpectedAfterOtherNames, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension TupleExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndElements")
  public var unexpectedBetweenLeftParenAndElementList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndElements
    }
    set {
      unexpectedBetweenLeftParenAndElements = newValue
    }
  }
  
  @available(*, deprecated, renamed: "elements")
  public var elementList: TupleExprElementListSyntax {
    get {
      return elements
    }
    set {
      elements = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenElementsAndRightParen")
  public var unexpectedBetweenElementListAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenElementsAndRightParen
    }
    set {
      unexpectedBetweenElementsAndRightParen = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with elementList argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax = .leftParenToken(),
      _ unexpectedBetweenLeftParenAndElementList: UnexpectedNodesSyntax? = nil,
      elementList: TupleExprElementListSyntax,
      _ unexpectedBetweenElementListAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax = .rightParenToken(),
      _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndElementList, 
        elements: elementList, 
        unexpectedBetweenElementListAndRightParen, 
        rightParen: rightParen, 
        unexpectedAfterRightParen, 
        trailingTrivia: trailingTrivia
      )
  }
}
