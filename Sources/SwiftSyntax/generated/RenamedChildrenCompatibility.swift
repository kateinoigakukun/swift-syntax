//// Automatically generated by generate-swiftsyntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension AccessorDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifierAndAccessorSpecifier")
  public var unexpectedBetweenModifierAndAccessorKind: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenModifierAndAccessorSpecifier
    }
    set {
      unexpectedBetweenModifierAndAccessorSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "accessorSpecifier")
  public var accessorKind: TokenSyntax {
    get {
      return accessorSpecifier
    }
    set {
      accessorSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAccessorSpecifierAndParameter")
  public var unexpectedBetweenAccessorKindAndParameter: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAccessorSpecifierAndParameter
    }
    set {
      unexpectedBetweenAccessorSpecifierAndParameter = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with accessorSpecifier argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
      attributes: AttributeListSyntax? = nil,
      _ unexpectedBetweenAttributesAndModifier: UnexpectedNodesSyntax? = nil,
      modifier: DeclModifierSyntax? = nil,
      _ unexpectedBetweenModifierAndAccessorKind: UnexpectedNodesSyntax? = nil,
      accessorKind: TokenSyntax,
      _ unexpectedBetweenAccessorKindAndParameter: UnexpectedNodesSyntax? = nil,
      parameter: AccessorParameterSyntax? = nil,
      _ unexpectedBetweenParameterAndEffectSpecifiers: UnexpectedNodesSyntax? = nil,
      effectSpecifiers: AccessorEffectSpecifiersSyntax? = nil,
      _ unexpectedBetweenEffectSpecifiersAndInitEffects: UnexpectedNodesSyntax? = nil,
      initEffects: AccessorInitEffectsSyntax? = nil,
      _ unexpectedBetweenInitEffectsAndBody: UnexpectedNodesSyntax? = nil,
      body: CodeBlockSyntax? = nil,
      _ unexpectedAfterBody: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAttributes, 
        attributes: attributes, 
        unexpectedBetweenAttributesAndModifier, 
        modifier: modifier, 
        unexpectedBetweenModifierAndAccessorKind, 
        accessorSpecifier: accessorKind, 
        unexpectedBetweenAccessorKindAndParameter, 
        parameter: parameter, 
        unexpectedBetweenParameterAndEffectSpecifiers, 
        effectSpecifiers: effectSpecifiers, 
        unexpectedBetweenEffectSpecifiersAndInitEffects, 
        initEffects: initEffects, 
        unexpectedBetweenInitEffectsAndBody, 
        body: body, 
        unexpectedAfterBody, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension ArrayExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftSquare
    }
    set {
      unexpectedBeforeLeftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftSquare")
  public var leftSquareBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndElements")
  public var unexpectedBetweenLeftSquareBracketAndElements: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndElements
    }
    set {
      unexpectedBetweenLeftSquareAndElements = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenElementsAndRightSquare")
  public var unexpectedBetweenElementsAndRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenElementsAndRightSquare
    }
    set {
      unexpectedBetweenElementsAndRightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightSquare")
  public var rightSquareBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightSquare
    }
    set {
      unexpectedAfterRightSquare = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with leftSquare, rightSquare argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? = nil,
      leftSquareBracket: TokenSyntax = .leftSquareToken(),
      _ unexpectedBetweenLeftSquareBracketAndElements: UnexpectedNodesSyntax? = nil,
      elements: ArrayElementListSyntax,
      _ unexpectedBetweenElementsAndRightSquareBracket: UnexpectedNodesSyntax? = nil,
      rightSquareBracket: TokenSyntax = .rightSquareToken(),
      _ unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftSquareBracket, 
        leftSquare: leftSquareBracket, 
        unexpectedBetweenLeftSquareBracketAndElements, 
        elements: elements, 
        unexpectedBetweenElementsAndRightSquareBracket, 
        rightSquare: rightSquareBracket, 
        unexpectedAfterRightSquareBracket, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension ArrayTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftSquare
    }
    set {
      unexpectedBeforeLeftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftSquare")
  public var leftSquareBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndElementType")
  public var unexpectedBetweenLeftSquareBracketAndElementType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndElementType
    }
    set {
      unexpectedBetweenLeftSquareAndElementType = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenElementTypeAndRightSquare")
  public var unexpectedBetweenElementTypeAndRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenElementTypeAndRightSquare
    }
    set {
      unexpectedBetweenElementTypeAndRightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightSquare")
  public var rightSquareBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightSquare
    }
    set {
      unexpectedAfterRightSquare = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with leftSquare, rightSquare argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? = nil,
      leftSquareBracket: TokenSyntax = .leftSquareToken(),
      _ unexpectedBetweenLeftSquareBracketAndElementType: UnexpectedNodesSyntax? = nil,
      elementType: some TypeSyntaxProtocol,
      _ unexpectedBetweenElementTypeAndRightSquareBracket: UnexpectedNodesSyntax? = nil,
      rightSquareBracket: TokenSyntax = .rightSquareToken(),
      _ unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftSquareBracket, 
        leftSquare: leftSquareBracket, 
        unexpectedBetweenLeftSquareBracketAndElementType, 
        elementType: elementType, 
        unexpectedBetweenElementTypeAndRightSquareBracket, 
        rightSquare: rightSquareBracket, 
        unexpectedAfterRightSquareBracket, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension ArrowExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenEffectSpecifiersAndArrow")
  public var unexpectedBetweenEffectSpecifiersAndArrowToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEffectSpecifiersAndArrow
    }
    set {
      unexpectedBetweenEffectSpecifiersAndArrow = newValue
    }
  }
  
  @available(*, deprecated, renamed: "arrow")
  public var arrowToken: TokenSyntax {
    get {
      return arrow
    }
    set {
      arrow = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterArrow")
  public var unexpectedAfterArrowToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterArrow
    }
    set {
      unexpectedAfterArrow = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with arrow argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeEffectSpecifiers: UnexpectedNodesSyntax? = nil,
      effectSpecifiers: TypeEffectSpecifiersSyntax? = nil,
      _ unexpectedBetweenEffectSpecifiersAndArrowToken: UnexpectedNodesSyntax? = nil,
      arrowToken: TokenSyntax = .arrowToken(),
      _ unexpectedAfterArrowToken: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeEffectSpecifiers, 
        effectSpecifiers: effectSpecifiers, 
        unexpectedBetweenEffectSpecifiersAndArrowToken, 
        arrow: arrowToken, 
        unexpectedAfterArrowToken, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension AsExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenExpressionAndAsKeyword")
  public var unexpectedBetweenExpressionAndAsTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenExpressionAndAsKeyword
    }
    set {
      unexpectedBetweenExpressionAndAsKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "asKeyword")
  public var asTok: TokenSyntax {
    get {
      return asKeyword
    }
    set {
      asKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAsKeywordAndQuestionOrExclamationMark")
  public var unexpectedBetweenAsTokAndQuestionOrExclamationMark: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAsKeywordAndQuestionOrExclamationMark
    }
    set {
      unexpectedBetweenAsKeywordAndQuestionOrExclamationMark = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with asKeyword argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeExpression: UnexpectedNodesSyntax? = nil,
      expression: some ExprSyntaxProtocol,
      _ unexpectedBetweenExpressionAndAsTok: UnexpectedNodesSyntax? = nil,
      asTok: TokenSyntax = .keyword(.as),
      _ unexpectedBetweenAsTokAndQuestionOrExclamationMark: UnexpectedNodesSyntax? = nil,
      questionOrExclamationMark: TokenSyntax? = nil,
      _ unexpectedBetweenQuestionOrExclamationMarkAndTypeName: UnexpectedNodesSyntax? = nil,
      typeName: some TypeSyntaxProtocol,
      _ unexpectedAfterTypeName: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeExpression, 
        expression: expression, 
        unexpectedBetweenExpressionAndAsTok, 
        asKeyword: asTok, 
        unexpectedBetweenAsTokAndQuestionOrExclamationMark, 
        questionOrExclamationMark: questionOrExclamationMark, 
        unexpectedBetweenQuestionOrExclamationMarkAndTypeName, 
        typeName: typeName, 
        unexpectedAfterTypeName, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension AssignmentExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeEqual")
  public var unexpectedBeforeAssignToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeEqual
    }
    set {
      unexpectedBeforeEqual = newValue
    }
  }
  
  @available(*, deprecated, renamed: "equal")
  public var assignToken: TokenSyntax {
    get {
      return equal
    }
    set {
      equal = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterEqual")
  public var unexpectedAfterAssignToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterEqual
    }
    set {
      unexpectedAfterEqual = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with equal argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAssignToken: UnexpectedNodesSyntax? = nil,
      assignToken: TokenSyntax = .equalToken(),
      _ unexpectedAfterAssignToken: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAssignToken, 
        equal: assignToken, 
        unexpectedAfterAssignToken, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension AttributeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAtSign")
  public var unexpectedBeforeAtSignToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeAtSign
    }
    set {
      unexpectedBeforeAtSign = newValue
    }
  }
  
  @available(*, deprecated, renamed: "atSign")
  public var atSignToken: TokenSyntax {
    get {
      return atSign
    }
    set {
      atSign = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAtSignAndAttributeName")
  public var unexpectedBetweenAtSignTokenAndAttributeName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAtSignAndAttributeName
    }
    set {
      unexpectedBetweenAtSignAndAttributeName = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with atSign argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAtSignToken: UnexpectedNodesSyntax? = nil,
      atSignToken: TokenSyntax = .atSignToken(),
      _ unexpectedBetweenAtSignTokenAndAttributeName: UnexpectedNodesSyntax? = nil,
      attributeName: some TypeSyntaxProtocol,
      _ unexpectedBetweenAttributeNameAndLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax? = nil,
      _ unexpectedBetweenLeftParenAndArgument: UnexpectedNodesSyntax? = nil,
      argument: Argument? = nil,
      _ unexpectedBetweenArgumentAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax? = nil,
      _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAtSignToken, 
        atSign: atSignToken, 
        unexpectedBetweenAtSignTokenAndAttributeName, 
        attributeName: attributeName, 
        unexpectedBetweenAttributeNameAndLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndArgument, 
        argument: argument, 
        unexpectedBetweenArgumentAndRightParen, 
        rightParen: rightParen, 
        unexpectedAfterRightParen, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension AvailabilityConditionSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndAvailabilityArguments")
  public var unexpectedBetweenLeftParenAndAvailabilitySpec: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndAvailabilityArguments
    }
    set {
      unexpectedBetweenLeftParenAndAvailabilityArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "availabilityArguments")
  public var availabilitySpec: AvailabilitySpecListSyntax {
    get {
      return availabilityArguments
    }
    set {
      availabilityArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAvailabilityArgumentsAndRightParen")
  public var unexpectedBetweenAvailabilitySpecAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAvailabilityArgumentsAndRightParen
    }
    set {
      unexpectedBetweenAvailabilityArgumentsAndRightParen = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with availabilityArguments argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAvailabilityKeyword: UnexpectedNodesSyntax? = nil,
      availabilityKeyword: TokenSyntax,
      _ unexpectedBetweenAvailabilityKeywordAndLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax = .leftParenToken(),
      _ unexpectedBetweenLeftParenAndAvailabilitySpec: UnexpectedNodesSyntax? = nil,
      availabilitySpec: AvailabilitySpecListSyntax,
      _ unexpectedBetweenAvailabilitySpecAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax = .rightParenToken(),
      _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAvailabilityKeyword, 
        availabilityKeyword: availabilityKeyword, 
        unexpectedBetweenAvailabilityKeywordAndLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndAvailabilitySpec, 
        availabilityArguments: availabilitySpec, 
        unexpectedBetweenAvailabilitySpecAndRightParen, 
        rightParen: rightParen, 
        unexpectedAfterRightParen, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension AvailabilityEntrySyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAvailabilityLabel")
  public var unexpectedBeforeLabel: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeAvailabilityLabel
    }
    set {
      unexpectedBeforeAvailabilityLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "availabilityLabel")
  public var label: TokenSyntax {
    get {
      return availabilityLabel
    }
    set {
      availabilityLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAvailabilityLabelAndColon")
  public var unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAvailabilityLabelAndColon
    }
    set {
      unexpectedBetweenAvailabilityLabelAndColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndAvailabilityArguments")
  public var unexpectedBetweenColonAndAvailabilityList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndAvailabilityArguments
    }
    set {
      unexpectedBetweenColonAndAvailabilityArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "availabilityArguments")
  public var availabilityList: AvailabilitySpecListSyntax {
    get {
      return availabilityArguments
    }
    set {
      availabilityArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "addAvailabilityArgument")
  public func addAvailability(_ element: AvailabilityArgumentSyntax) -> AvailabilityEntrySyntax {
    return addAvailabilityArgument(element)
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAvailabilityArgumentsAndSemicolon")
  public var unexpectedBetweenAvailabilityListAndSemicolon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAvailabilityArgumentsAndSemicolon
    }
    set {
      unexpectedBetweenAvailabilityArgumentsAndSemicolon = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with availabilityLabel, availabilityArguments argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLabel: UnexpectedNodesSyntax? = nil,
      label: TokenSyntax = .keyword(.availability),
      _ unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndAvailabilityList: UnexpectedNodesSyntax? = nil,
      availabilityList: AvailabilitySpecListSyntax,
      _ unexpectedBetweenAvailabilityListAndSemicolon: UnexpectedNodesSyntax? = nil,
      semicolon: TokenSyntax = .semicolonToken(),
      _ unexpectedAfterSemicolon: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLabel, 
        availabilityLabel: label, 
        unexpectedBetweenLabelAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndAvailabilityList, 
        availabilityArguments: availabilityList, 
        unexpectedBetweenAvailabilityListAndSemicolon, 
        semicolon: semicolon, 
        unexpectedAfterSemicolon, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension BackDeployedAttributeSpecListSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndPlatforms")
  public var unexpectedBetweenColonAndVersionList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndPlatforms
    }
    set {
      unexpectedBetweenColonAndPlatforms = newValue
    }
  }
  
  @available(*, deprecated, renamed: "platforms")
  public var versionList: AvailabilityVersionRestrictionListSyntax {
    get {
      return platforms
    }
    set {
      platforms = newValue
    }
  }
  
  @available(*, deprecated, renamed: "addPlatform")
  public func addAvailability(_ element: AvailabilityVersionRestrictionListEntrySyntax) -> BackDeployedAttributeSpecListSyntax {
    return addPlatform(element)
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterPlatforms")
  public var unexpectedAfterVersionList: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterPlatforms
    }
    set {
      unexpectedAfterPlatforms = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with platforms argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeBeforeLabel: UnexpectedNodesSyntax? = nil,
      beforeLabel: TokenSyntax = .keyword(.before),
      _ unexpectedBetweenBeforeLabelAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndVersionList: UnexpectedNodesSyntax? = nil,
      versionList: AvailabilityVersionRestrictionListSyntax,
      _ unexpectedAfterVersionList: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeBeforeLabel, 
        beforeLabel: beforeLabel, 
        unexpectedBetweenBeforeLabelAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndVersionList, 
        platforms: versionList, 
        unexpectedAfterVersionList, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension BinaryOperatorExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeOperator")
  public var unexpectedBeforeOperatorToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeOperator
    }
    set {
      unexpectedBeforeOperator = newValue
    }
  }
  
  @available(*, deprecated, renamed: "operator")
  public var operatorToken: TokenSyntax {
    get {
      return `operator`
    }
    set {
      `operator` = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterOperator")
  public var unexpectedAfterOperatorToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterOperator
    }
    set {
      unexpectedAfterOperator = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with operator argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeOperatorToken: UnexpectedNodesSyntax? = nil,
      operatorToken: TokenSyntax,
      _ unexpectedAfterOperatorToken: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeOperatorToken, 
        operator: operatorToken, 
        unexpectedAfterOperatorToken, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension BooleanLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLiteral")
  public var unexpectedBeforeBooleanLiteral: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLiteral
    }
    set {
      unexpectedBeforeLiteral = newValue
    }
  }
  
  @available(*, deprecated, renamed: "literal")
  public var booleanLiteral: TokenSyntax {
    get {
      return literal
    }
    set {
      literal = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterLiteral")
  public var unexpectedAfterBooleanLiteral: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterLiteral
    }
    set {
      unexpectedAfterLiteral = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with literal argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeBooleanLiteral: UnexpectedNodesSyntax? = nil,
      booleanLiteral: TokenSyntax,
      _ unexpectedAfterBooleanLiteral: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeBooleanLiteral, 
        literal: booleanLiteral, 
        unexpectedAfterBooleanLiteral, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension ClosureCaptureItemSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndEqual")
  public var unexpectedBetweenNameAndAssignToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenNameAndEqual
    }
    set {
      unexpectedBetweenNameAndEqual = newValue
    }
  }
  
  @available(*, deprecated, renamed: "equal")
  public var assignToken: TokenSyntax? {
    get {
      return equal
    }
    set {
      equal = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenEqualAndExpression")
  public var unexpectedBetweenAssignTokenAndExpression: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEqualAndExpression
    }
    set {
      unexpectedBetweenEqualAndExpression = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with equal argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeSpecifier: UnexpectedNodesSyntax? = nil,
      specifier: ClosureCaptureItemSpecifierSyntax? = nil,
      _ unexpectedBetweenSpecifierAndName: UnexpectedNodesSyntax? = nil,
      name: TokenSyntax? = nil,
      _ unexpectedBetweenNameAndAssignToken: UnexpectedNodesSyntax? = nil,
      assignToken: TokenSyntax? = nil,
      _ unexpectedBetweenAssignTokenAndExpression: UnexpectedNodesSyntax? = nil,
      expression: some ExprSyntaxProtocol,
      _ unexpectedBetweenExpressionAndTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingComma: TokenSyntax? = nil,
      _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeSpecifier, 
        specifier: specifier, 
        unexpectedBetweenSpecifierAndName, 
        name: name, 
        unexpectedBetweenNameAndAssignToken, 
        equal: assignToken, 
        unexpectedBetweenAssignTokenAndExpression, 
        expression: expression, 
        unexpectedBetweenExpressionAndTrailingComma, 
        trailingComma: trailingComma, 
        unexpectedAfterTrailingComma, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension ClosureSignatureSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenOutputAndInKeyword")
  public var unexpectedBetweenOutputAndInTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOutputAndInKeyword
    }
    set {
      unexpectedBetweenOutputAndInKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "inKeyword")
  public var inTok: TokenSyntax {
    get {
      return inKeyword
    }
    set {
      inKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterInKeyword")
  public var unexpectedAfterInTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterInKeyword
    }
    set {
      unexpectedAfterInKeyword = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with inKeyword argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
      attributes: AttributeListSyntax? = nil,
      _ unexpectedBetweenAttributesAndCapture: UnexpectedNodesSyntax? = nil,
      capture: ClosureCaptureSignatureSyntax? = nil,
      _ unexpectedBetweenCaptureAndInput: UnexpectedNodesSyntax? = nil,
      input: Input? = nil,
      _ unexpectedBetweenInputAndEffectSpecifiers: UnexpectedNodesSyntax? = nil,
      effectSpecifiers: TypeEffectSpecifiersSyntax? = nil,
      _ unexpectedBetweenEffectSpecifiersAndOutput: UnexpectedNodesSyntax? = nil,
      output: ReturnClauseSyntax? = nil,
      _ unexpectedBetweenOutputAndInTok: UnexpectedNodesSyntax? = nil,
      inTok: TokenSyntax = .keyword(.in),
      _ unexpectedAfterInTok: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAttributes, 
        attributes: attributes, 
        unexpectedBetweenAttributesAndCapture, 
        capture: capture, 
        unexpectedBetweenCaptureAndInput, 
        input: input, 
        unexpectedBetweenInputAndEffectSpecifiers, 
        effectSpecifiers: effectSpecifiers, 
        unexpectedBetweenEffectSpecifiersAndOutput, 
        output: output, 
        unexpectedBetweenOutputAndInTok, 
        inKeyword: inTok, 
        unexpectedAfterInTok, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension DerivativeRegistrationAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenPeriodAndAccessorSpecifier")
  public var unexpectedBetweenPeriodAndAccessorKind: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPeriodAndAccessorSpecifier
    }
    set {
      unexpectedBetweenPeriodAndAccessorSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "accessorSpecifier")
  public var accessorKind: TokenSyntax? {
    get {
      return accessorSpecifier
    }
    set {
      accessorSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAccessorSpecifierAndComma")
  public var unexpectedBetweenAccessorKindAndComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAccessorSpecifierAndComma
    }
    set {
      unexpectedBetweenAccessorSpecifierAndComma = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenCommaAndParameters")
  public var unexpectedBetweenCommaAndDiffParams: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenCommaAndParameters
    }
    set {
      unexpectedBetweenCommaAndParameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "parameters")
  public var diffParams: DifferentiabilityParamsClauseSyntax? {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterParameters")
  public var unexpectedAfterDiffParams: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterParameters
    }
    set {
      unexpectedAfterParameters = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with accessorSpecifier, parameters argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeOfLabel: UnexpectedNodesSyntax? = nil,
      ofLabel: TokenSyntax = .keyword(.of),
      _ unexpectedBetweenOfLabelAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndOriginalDeclName: UnexpectedNodesSyntax? = nil,
      originalDeclName: QualifiedDeclNameSyntax,
      _ unexpectedBetweenOriginalDeclNameAndPeriod: UnexpectedNodesSyntax? = nil,
      period: TokenSyntax? = nil,
      _ unexpectedBetweenPeriodAndAccessorKind: UnexpectedNodesSyntax? = nil,
      accessorKind: TokenSyntax? = nil,
      _ unexpectedBetweenAccessorKindAndComma: UnexpectedNodesSyntax? = nil,
      comma: TokenSyntax? = nil,
      _ unexpectedBetweenCommaAndDiffParams: UnexpectedNodesSyntax? = nil,
      diffParams: DifferentiabilityParamsClauseSyntax? = nil,
      _ unexpectedAfterDiffParams: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeOfLabel, 
        ofLabel: ofLabel, 
        unexpectedBetweenOfLabelAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndOriginalDeclName, 
        originalDeclName: originalDeclName, 
        unexpectedBetweenOriginalDeclNameAndPeriod, 
        period: period, 
        unexpectedBetweenPeriodAndAccessorKind, 
        accessorSpecifier: accessorKind, 
        unexpectedBetweenAccessorKindAndComma, 
        comma: comma, 
        unexpectedBetweenCommaAndDiffParams, 
        parameters: diffParams, 
        unexpectedAfterDiffParams, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension DictionaryTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftSquare
    }
    set {
      unexpectedBeforeLeftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftSquare")
  public var leftSquareBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndKeyType")
  public var unexpectedBetweenLeftSquareBracketAndKeyType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndKeyType
    }
    set {
      unexpectedBetweenLeftSquareAndKeyType = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenValueTypeAndRightSquare")
  public var unexpectedBetweenValueTypeAndRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenValueTypeAndRightSquare
    }
    set {
      unexpectedBetweenValueTypeAndRightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightSquare")
  public var rightSquareBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightSquare
    }
    set {
      unexpectedAfterRightSquare = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with leftSquare, rightSquare argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? = nil,
      leftSquareBracket: TokenSyntax = .leftSquareToken(),
      _ unexpectedBetweenLeftSquareBracketAndKeyType: UnexpectedNodesSyntax? = nil,
      keyType: some TypeSyntaxProtocol,
      _ unexpectedBetweenKeyTypeAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndValueType: UnexpectedNodesSyntax? = nil,
      valueType: some TypeSyntaxProtocol,
      _ unexpectedBetweenValueTypeAndRightSquareBracket: UnexpectedNodesSyntax? = nil,
      rightSquareBracket: TokenSyntax = .rightSquareToken(),
      _ unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftSquareBracket, 
        leftSquare: leftSquareBracket, 
        unexpectedBetweenLeftSquareBracketAndKeyType, 
        keyType: keyType, 
        unexpectedBetweenKeyTypeAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndValueType, 
        valueType: valueType, 
        unexpectedBetweenValueTypeAndRightSquareBracket, 
        rightSquare: rightSquareBracket, 
        unexpectedAfterRightSquareBracket, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension DifferentiableAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeKindSpecifier")
  public var unexpectedBeforeDiffKind: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeKindSpecifier
    }
    set {
      unexpectedBeforeKindSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "kindSpecifier")
  public var diffKind: TokenSyntax? {
    get {
      return kindSpecifier
    }
    set {
      kindSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenKindSpecifierAndKindSpecifierComma")
  public var unexpectedBetweenDiffKindAndDiffKindComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenKindSpecifierAndKindSpecifierComma
    }
    set {
      unexpectedBetweenKindSpecifierAndKindSpecifierComma = newValue
    }
  }
  
  @available(*, deprecated, renamed: "kindSpecifierComma")
  public var diffKindComma: TokenSyntax? {
    get {
      return kindSpecifierComma
    }
    set {
      kindSpecifierComma = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenKindSpecifierCommaAndParameters")
  public var unexpectedBetweenDiffKindCommaAndDiffParams: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenKindSpecifierCommaAndParameters
    }
    set {
      unexpectedBetweenKindSpecifierCommaAndParameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "parameters")
  public var diffParams: DifferentiabilityParamsClauseSyntax? {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndParametersComma")
  public var unexpectedBetweenDiffParamsAndDiffParamsComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersAndParametersComma
    }
    set {
      unexpectedBetweenParametersAndParametersComma = newValue
    }
  }
  
  @available(*, deprecated, renamed: "parametersComma")
  public var diffParamsComma: TokenSyntax? {
    get {
      return parametersComma
    }
    set {
      parametersComma = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenParametersCommaAndWhereClause")
  public var unexpectedBetweenDiffParamsCommaAndWhereClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersCommaAndWhereClause
    }
    set {
      unexpectedBetweenParametersCommaAndWhereClause = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with kindSpecifier, kindSpecifierComma, parameters, parametersComma argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeDiffKind: UnexpectedNodesSyntax? = nil,
      diffKind: TokenSyntax? = nil,
      _ unexpectedBetweenDiffKindAndDiffKindComma: UnexpectedNodesSyntax? = nil,
      diffKindComma: TokenSyntax? = nil,
      _ unexpectedBetweenDiffKindCommaAndDiffParams: UnexpectedNodesSyntax? = nil,
      diffParams: DifferentiabilityParamsClauseSyntax? = nil,
      _ unexpectedBetweenDiffParamsAndDiffParamsComma: UnexpectedNodesSyntax? = nil,
      diffParamsComma: TokenSyntax? = nil,
      _ unexpectedBetweenDiffParamsCommaAndWhereClause: UnexpectedNodesSyntax? = nil,
      whereClause: GenericWhereClauseSyntax? = nil,
      _ unexpectedAfterWhereClause: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeDiffKind, 
        kindSpecifier: diffKind, 
        unexpectedBetweenDiffKindAndDiffKindComma, 
        kindSpecifierComma: diffKindComma, 
        unexpectedBetweenDiffKindCommaAndDiffParams, 
        parameters: diffParams, 
        unexpectedBetweenDiffParamsAndDiffParamsComma, 
        parametersComma: diffParamsComma, 
        unexpectedBetweenDiffParamsCommaAndWhereClause, 
        whereClause: whereClause, 
        unexpectedAfterWhereClause, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension EditorPlaceholderDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndPlaceholder")
  public var unexpectedBetweenModifiersAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenModifiersAndPlaceholder
    }
    set {
      unexpectedBetweenModifiersAndPlaceholder = newValue
    }
  }
  
  @available(*, deprecated, renamed: "placeholder")
  public var identifier: TokenSyntax {
    get {
      return placeholder
    }
    set {
      placeholder = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterPlaceholder")
  public var unexpectedAfterIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterPlaceholder
    }
    set {
      unexpectedAfterPlaceholder = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with placeholder argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
      attributes: AttributeListSyntax? = nil,
      _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
      modifiers: ModifierListSyntax? = nil,
      _ unexpectedBetweenModifiersAndIdentifier: UnexpectedNodesSyntax? = nil,
      identifier: TokenSyntax,
      _ unexpectedAfterIdentifier: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAttributes, 
        attributes: attributes, 
        unexpectedBetweenAttributesAndModifiers, 
        modifiers: modifiers, 
        unexpectedBetweenModifiersAndIdentifier, 
        placeholder: identifier, 
        unexpectedAfterIdentifier, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension EnumDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenIdentifierAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameters: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenIdentifierAndGenericParameterClause
    }
    set {
      unexpectedBetweenIdentifierAndGenericParameterClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "genericParameterClause")
  public var genericParameters: GenericParameterClauseSyntax? {
    get {
      return genericParameterClause
    }
    set {
      genericParameterClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenGenericParameterClauseAndInheritanceClause")
  public var unexpectedBetweenGenericParametersAndInheritanceClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenGenericParameterClauseAndInheritanceClause
    }
    set {
      unexpectedBetweenGenericParameterClauseAndInheritanceClause = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with genericParameterClause argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
      attributes: AttributeListSyntax? = nil,
      _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
      modifiers: ModifierListSyntax? = nil,
      _ unexpectedBetweenModifiersAndEnumKeyword: UnexpectedNodesSyntax? = nil,
      enumKeyword: TokenSyntax = .keyword(.enum),
      _ unexpectedBetweenEnumKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
      identifier: TokenSyntax,
      _ unexpectedBetweenIdentifierAndGenericParameters: UnexpectedNodesSyntax? = nil,
      genericParameters: GenericParameterClauseSyntax? = nil,
      _ unexpectedBetweenGenericParametersAndInheritanceClause: UnexpectedNodesSyntax? = nil,
      inheritanceClause: TypeInheritanceClauseSyntax? = nil,
      _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
      genericWhereClause: GenericWhereClauseSyntax? = nil,
      _ unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? = nil,
      memberBlock: MemberDeclBlockSyntax,
      _ unexpectedAfterMemberBlock: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAttributes, 
        attributes: attributes, 
        unexpectedBetweenAttributesAndModifiers, 
        modifiers: modifiers, 
        unexpectedBetweenModifiersAndEnumKeyword, 
        enumKeyword: enumKeyword, 
        unexpectedBetweenEnumKeywordAndIdentifier, 
        identifier: identifier, 
        unexpectedBetweenIdentifierAndGenericParameters, 
        genericParameterClause: genericParameters, 
        unexpectedBetweenGenericParametersAndInheritanceClause, 
        inheritanceClause: inheritanceClause, 
        unexpectedBetweenInheritanceClauseAndGenericWhereClause, 
        genericWhereClause: genericWhereClause, 
        unexpectedBetweenGenericWhereClauseAndMemberBlock, 
        memberBlock: memberBlock, 
        unexpectedAfterMemberBlock, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension ExpressionSegmentSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenBackslashAndRawStringDelimiter")
  public var unexpectedBetweenBackslashAndDelimiter: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenBackslashAndRawStringDelimiter
    }
    set {
      unexpectedBetweenBackslashAndRawStringDelimiter = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rawStringDelimiter")
  public var delimiter: TokenSyntax? {
    get {
      return rawStringDelimiter
    }
    set {
      rawStringDelimiter = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenRawStringDelimiterAndLeftParen")
  public var unexpectedBetweenDelimiterAndLeftParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenRawStringDelimiterAndLeftParen
    }
    set {
      unexpectedBetweenRawStringDelimiterAndLeftParen = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with rawStringDelimiter argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeBackslash: UnexpectedNodesSyntax? = nil,
      backslash: TokenSyntax = .backslashToken(),
      _ unexpectedBetweenBackslashAndDelimiter: UnexpectedNodesSyntax? = nil,
      delimiter: TokenSyntax? = nil,
      _ unexpectedBetweenDelimiterAndLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax = .leftParenToken(),
      _ unexpectedBetweenLeftParenAndExpressions: UnexpectedNodesSyntax? = nil,
      expressions: TupleExprElementListSyntax,
      _ unexpectedBetweenExpressionsAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax = .rightParenToken(),
      _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeBackslash, 
        backslash: backslash, 
        unexpectedBetweenBackslashAndDelimiter, 
        rawStringDelimiter: delimiter, 
        unexpectedBetweenDelimiterAndLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndExpressions, 
        expressions: expressions, 
        unexpectedBetweenExpressionsAndRightParen, 
        rightParen: rightParen, 
        unexpectedAfterRightParen, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension FloatLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeDigits")
  public var unexpectedBeforeFloatingDigits: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeDigits
    }
    set {
      unexpectedBeforeDigits = newValue
    }
  }
  
  @available(*, deprecated, renamed: "digits")
  public var floatingDigits: TokenSyntax {
    get {
      return digits
    }
    set {
      digits = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterDigits")
  public var unexpectedAfterFloatingDigits: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterDigits
    }
    set {
      unexpectedAfterDigits = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with digits argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeFloatingDigits: UnexpectedNodesSyntax? = nil,
      floatingDigits: TokenSyntax,
      _ unexpectedAfterFloatingDigits: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeFloatingDigits, 
        digits: floatingDigits, 
        unexpectedAfterFloatingDigits, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension FunctionTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndParameters")
  public var unexpectedBetweenLeftParenAndarguments: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndParameters
    }
    set {
      unexpectedBetweenLeftParenAndParameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "parameters")
  public var arguments: TupleTypeElementListSyntax {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "addParameter")
  public func addArgument(_ element: TupleTypeElementSyntax) -> FunctionTypeSyntax {
    return addParameter(element)
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndRightParen")
  public var unexpectedBetweenargumentsAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersAndRightParen
    }
    set {
      unexpectedBetweenParametersAndRightParen = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with parameters argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax = .leftParenToken(),
      _ unexpectedBetweenLeftParenAndarguments: UnexpectedNodesSyntax? = nil,
      arguments: TupleTypeElementListSyntax,
      _ unexpectedBetweenargumentsAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax = .rightParenToken(),
      _ unexpectedBetweenRightParenAndEffectSpecifiers: UnexpectedNodesSyntax? = nil,
      effectSpecifiers: TypeEffectSpecifiersSyntax? = nil,
      _ unexpectedBetweenEffectSpecifiersAndOutput: UnexpectedNodesSyntax? = nil,
      output: ReturnClauseSyntax,
      _ unexpectedAfterOutput: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndarguments, 
        parameters: arguments, 
        unexpectedBetweenargumentsAndRightParen, 
        rightParen: rightParen, 
        unexpectedBetweenRightParenAndEffectSpecifiers, 
        effectSpecifiers: effectSpecifiers, 
        unexpectedBetweenEffectSpecifiersAndOutput, 
        output: output, 
        unexpectedAfterOutput, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension GenericArgumentClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftAngle")
  public var unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftAngle
    }
    set {
      unexpectedBeforeLeftAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftAngle")
  public var leftAngleBracket: TokenSyntax {
    get {
      return leftAngle
    }
    set {
      leftAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftAngleAndArguments")
  public var unexpectedBetweenLeftAngleBracketAndArguments: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftAngleAndArguments
    }
    set {
      unexpectedBetweenLeftAngleAndArguments = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightAngle")
  public var unexpectedBetweenArgumentsAndRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightAngle
    }
    set {
      unexpectedBetweenArgumentsAndRightAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightAngle")
  public var rightAngleBracket: TokenSyntax {
    get {
      return rightAngle
    }
    set {
      rightAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterRightAngle")
  public var unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightAngle
    }
    set {
      unexpectedAfterRightAngle = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with leftAngle, rightAngle argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? = nil,
      leftAngleBracket: TokenSyntax = .leftAngleToken(),
      _ unexpectedBetweenLeftAngleBracketAndArguments: UnexpectedNodesSyntax? = nil,
      arguments: GenericArgumentListSyntax,
      _ unexpectedBetweenArgumentsAndRightAngleBracket: UnexpectedNodesSyntax? = nil,
      rightAngleBracket: TokenSyntax = .rightAngleToken(),
      _ unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftAngleBracket, 
        leftAngle: leftAngleBracket, 
        unexpectedBetweenLeftAngleBracketAndArguments, 
        arguments: arguments, 
        unexpectedBetweenArgumentsAndRightAngleBracket, 
        rightAngle: rightAngleBracket, 
        unexpectedAfterRightAngleBracket, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension GenericParameterClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftAngle")
  public var unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftAngle
    }
    set {
      unexpectedBeforeLeftAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftAngle")
  public var leftAngleBracket: TokenSyntax {
    get {
      return leftAngle
    }
    set {
      leftAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftAngleAndParameters")
  public var unexpectedBetweenLeftAngleBracketAndGenericParameterList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftAngleAndParameters
    }
    set {
      unexpectedBetweenLeftAngleAndParameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "parameters")
  public var genericParameterList: GenericParameterListSyntax {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }
  
  @available(*, deprecated, renamed: "addParameter")
  public func addGenericParameter(_ element: GenericParameterSyntax) -> GenericParameterClauseSyntax {
    return addParameter(element)
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndGenericWhereClause")
  public var unexpectedBetweenGenericParameterListAndGenericWhereClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersAndGenericWhereClause
    }
    set {
      unexpectedBetweenParametersAndGenericWhereClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenGenericWhereClauseAndRightAngle")
  public var unexpectedBetweenGenericWhereClauseAndRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenGenericWhereClauseAndRightAngle
    }
    set {
      unexpectedBetweenGenericWhereClauseAndRightAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightAngle")
  public var rightAngleBracket: TokenSyntax {
    get {
      return rightAngle
    }
    set {
      rightAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterRightAngle")
  public var unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightAngle
    }
    set {
      unexpectedAfterRightAngle = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with leftAngle, parameters, rightAngle argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? = nil,
      leftAngleBracket: TokenSyntax = .leftAngleToken(),
      _ unexpectedBetweenLeftAngleBracketAndGenericParameterList: UnexpectedNodesSyntax? = nil,
      genericParameterList: GenericParameterListSyntax,
      _ unexpectedBetweenGenericParameterListAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
      genericWhereClause: GenericWhereClauseSyntax? = nil,
      _ unexpectedBetweenGenericWhereClauseAndRightAngleBracket: UnexpectedNodesSyntax? = nil,
      rightAngleBracket: TokenSyntax = .rightAngleToken(),
      _ unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftAngleBracket, 
        leftAngle: leftAngleBracket, 
        unexpectedBetweenLeftAngleBracketAndGenericParameterList, 
        parameters: genericParameterList, 
        unexpectedBetweenGenericParameterListAndGenericWhereClause, 
        genericWhereClause: genericWhereClause, 
        unexpectedBetweenGenericWhereClauseAndRightAngleBracket, 
        rightAngle: rightAngleBracket, 
        unexpectedAfterRightAngleBracket, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension GenericParameterSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenAttributesAndEachKeyword")
  public var unexpectedBetweenAttributesAndEach: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAttributesAndEachKeyword
    }
    set {
      unexpectedBetweenAttributesAndEachKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "eachKeyword")
  public var each: TokenSyntax? {
    get {
      return eachKeyword
    }
    set {
      eachKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenEachKeywordAndName")
  public var unexpectedBetweenEachAndName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEachKeywordAndName
    }
    set {
      unexpectedBetweenEachKeywordAndName = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with eachKeyword argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
      attributes: AttributeListSyntax? = nil,
      _ unexpectedBetweenAttributesAndEach: UnexpectedNodesSyntax? = nil,
      each: TokenSyntax? = nil,
      _ unexpectedBetweenEachAndName: UnexpectedNodesSyntax? = nil,
      name: TokenSyntax,
      _ unexpectedBetweenNameAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax? = nil,
      _ unexpectedBetweenColonAndInheritedType: UnexpectedNodesSyntax? = nil,
      inheritedType: (some TypeSyntaxProtocol)? = TypeSyntax?.none,
      _ unexpectedBetweenInheritedTypeAndTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingComma: TokenSyntax? = nil,
      _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAttributes, 
        attributes: attributes, 
        unexpectedBetweenAttributesAndEach, 
        eachKeyword: each, 
        unexpectedBetweenEachAndName, 
        name: name, 
        unexpectedBetweenNameAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndInheritedType, 
        inheritedType: inheritedType, 
        unexpectedBetweenInheritedTypeAndTrailingComma, 
        trailingComma: trailingComma, 
        unexpectedAfterTrailingComma, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension ImportDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndImportKeyword")
  public var unexpectedBetweenModifiersAndImportTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenModifiersAndImportKeyword
    }
    set {
      unexpectedBetweenModifiersAndImportKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "importKeyword")
  public var importTok: TokenSyntax {
    get {
      return importKeyword
    }
    set {
      importKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenImportKeywordAndImportKindSpecifier")
  public var unexpectedBetweenImportTokAndImportKind: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenImportKeywordAndImportKindSpecifier
    }
    set {
      unexpectedBetweenImportKeywordAndImportKindSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "importKindSpecifier")
  public var importKind: TokenSyntax? {
    get {
      return importKindSpecifier
    }
    set {
      importKindSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenImportKindSpecifierAndPath")
  public var unexpectedBetweenImportKindAndPath: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenImportKindSpecifierAndPath
    }
    set {
      unexpectedBetweenImportKindSpecifierAndPath = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with importKeyword, importKindSpecifier argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
      attributes: AttributeListSyntax? = nil,
      _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
      modifiers: ModifierListSyntax? = nil,
      _ unexpectedBetweenModifiersAndImportTok: UnexpectedNodesSyntax? = nil,
      importTok: TokenSyntax = .keyword(.import),
      _ unexpectedBetweenImportTokAndImportKind: UnexpectedNodesSyntax? = nil,
      importKind: TokenSyntax? = nil,
      _ unexpectedBetweenImportKindAndPath: UnexpectedNodesSyntax? = nil,
      path: ImportPathSyntax,
      _ unexpectedAfterPath: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAttributes, 
        attributes: attributes, 
        unexpectedBetweenAttributesAndModifiers, 
        modifiers: modifiers, 
        unexpectedBetweenModifiersAndImportTok, 
        importKeyword: importTok, 
        unexpectedBetweenImportTokAndImportKind, 
        importKindSpecifier: importKind, 
        unexpectedBetweenImportKindAndPath, 
        path: path, 
        unexpectedAfterPath, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension ImportPathComponentSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndTrailingPeriod")
  public var unexpectedBetweenNameAndTrailingDot: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenNameAndTrailingPeriod
    }
    set {
      unexpectedBetweenNameAndTrailingPeriod = newValue
    }
  }
  
  @available(*, deprecated, renamed: "trailingPeriod")
  public var trailingDot: TokenSyntax? {
    get {
      return trailingPeriod
    }
    set {
      trailingPeriod = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterTrailingPeriod")
  public var unexpectedAfterTrailingDot: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterTrailingPeriod
    }
    set {
      unexpectedAfterTrailingPeriod = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with trailingPeriod argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeName: UnexpectedNodesSyntax? = nil,
      name: TokenSyntax,
      _ unexpectedBetweenNameAndTrailingDot: UnexpectedNodesSyntax? = nil,
      trailingDot: TokenSyntax? = nil,
      _ unexpectedAfterTrailingDot: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeName, 
        name: name, 
        unexpectedBetweenNameAndTrailingDot, 
        trailingPeriod: trailingDot, 
        unexpectedAfterTrailingDot, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension IsExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenExpressionAndIsKeyword")
  public var unexpectedBetweenExpressionAndIsTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenExpressionAndIsKeyword
    }
    set {
      unexpectedBetweenExpressionAndIsKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "isKeyword")
  public var isTok: TokenSyntax {
    get {
      return isKeyword
    }
    set {
      isKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenIsKeywordAndTypeName")
  public var unexpectedBetweenIsTokAndTypeName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenIsKeywordAndTypeName
    }
    set {
      unexpectedBetweenIsKeywordAndTypeName = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with isKeyword argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeExpression: UnexpectedNodesSyntax? = nil,
      expression: some ExprSyntaxProtocol,
      _ unexpectedBetweenExpressionAndIsTok: UnexpectedNodesSyntax? = nil,
      isTok: TokenSyntax = .keyword(.is),
      _ unexpectedBetweenIsTokAndTypeName: UnexpectedNodesSyntax? = nil,
      typeName: some TypeSyntaxProtocol,
      _ unexpectedAfterTypeName: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeExpression, 
        expression: expression, 
        unexpectedBetweenExpressionAndIsTok, 
        isKeyword: isTok, 
        unexpectedBetweenIsTokAndTypeName, 
        typeName: typeName, 
        unexpectedAfterTypeName, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension KeyPathSubscriptComponentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftSquare
    }
    set {
      unexpectedBeforeLeftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftSquare")
  public var leftBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndArgumentList")
  public var unexpectedBetweenLeftBracketAndArgumentList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndArgumentList
    }
    set {
      unexpectedBetweenLeftSquareAndArgumentList = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentListAndRightSquare")
  public var unexpectedBetweenArgumentListAndRightBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentListAndRightSquare
    }
    set {
      unexpectedBetweenArgumentListAndRightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightSquare")
  public var rightBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightSquare
    }
    set {
      unexpectedAfterRightSquare = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with leftSquare, rightSquare argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftBracket: UnexpectedNodesSyntax? = nil,
      leftBracket: TokenSyntax = .leftSquareToken(),
      _ unexpectedBetweenLeftBracketAndArgumentList: UnexpectedNodesSyntax? = nil,
      argumentList: TupleExprElementListSyntax,
      _ unexpectedBetweenArgumentListAndRightBracket: UnexpectedNodesSyntax? = nil,
      rightBracket: TokenSyntax = .rightSquareToken(),
      _ unexpectedAfterRightBracket: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftBracket, 
        leftSquare: leftBracket, 
        unexpectedBetweenLeftBracketAndArgumentList, 
        argumentList: argumentList, 
        unexpectedBetweenArgumentListAndRightBracket, 
        rightSquare: rightBracket, 
        unexpectedAfterRightBracket, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension LabeledStmtSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLabel")
  public var unexpectedBeforeLabelName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLabel
    }
    set {
      unexpectedBeforeLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "label")
  public var labelName: TokenSyntax {
    get {
      return label
    }
    set {
      label = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLabelAndColon")
  public var unexpectedBetweenLabelNameAndLabelColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLabelAndColon
    }
    set {
      unexpectedBetweenLabelAndColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "colon")
  public var labelColon: TokenSyntax {
    get {
      return colon
    }
    set {
      colon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndStatement")
  public var unexpectedBetweenLabelColonAndStatement: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndStatement
    }
    set {
      unexpectedBetweenColonAndStatement = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with label, colon argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLabelName: UnexpectedNodesSyntax? = nil,
      labelName: TokenSyntax,
      _ unexpectedBetweenLabelNameAndLabelColon: UnexpectedNodesSyntax? = nil,
      labelColon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenLabelColonAndStatement: UnexpectedNodesSyntax? = nil,
      statement: some StmtSyntaxProtocol,
      _ unexpectedAfterStatement: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLabelName, 
        label: labelName, 
        unexpectedBetweenLabelNameAndLabelColon, 
        colon: labelColon, 
        unexpectedBetweenLabelColonAndStatement, 
        statement: statement, 
        unexpectedAfterStatement, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension MacroExpansionDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndPound")
  public var unexpectedBetweenModifiersAndPoundToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenModifiersAndPound
    }
    set {
      unexpectedBetweenModifiersAndPound = newValue
    }
  }
  
  @available(*, deprecated, renamed: "pound")
  public var poundToken: TokenSyntax {
    get {
      return pound
    }
    set {
      pound = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenPoundAndMacro")
  public var unexpectedBetweenPoundTokenAndMacro: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPoundAndMacro
    }
    set {
      unexpectedBetweenPoundAndMacro = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with pound argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
      attributes: AttributeListSyntax? = nil,
      _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
      modifiers: ModifierListSyntax? = nil,
      _ unexpectedBetweenModifiersAndPoundToken: UnexpectedNodesSyntax? = nil,
      poundToken: TokenSyntax = .poundToken(),
      _ unexpectedBetweenPoundTokenAndMacro: UnexpectedNodesSyntax? = nil,
      macro: TokenSyntax,
      _ unexpectedBetweenMacroAndGenericArguments: UnexpectedNodesSyntax? = nil,
      genericArguments: GenericArgumentClauseSyntax? = nil,
      _ unexpectedBetweenGenericArgumentsAndLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax? = nil,
      _ unexpectedBetweenLeftParenAndArgumentList: UnexpectedNodesSyntax? = nil,
      argumentList: TupleExprElementListSyntax,
      _ unexpectedBetweenArgumentListAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax? = nil,
      _ unexpectedBetweenRightParenAndTrailingClosure: UnexpectedNodesSyntax? = nil,
      trailingClosure: ClosureExprSyntax? = nil,
      _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
      additionalTrailingClosures: MultipleTrailingClosureElementListSyntax? = nil,
      _ unexpectedAfterAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAttributes, 
        attributes: attributes, 
        unexpectedBetweenAttributesAndModifiers, 
        modifiers: modifiers, 
        unexpectedBetweenModifiersAndPoundToken, 
        pound: poundToken, 
        unexpectedBetweenPoundTokenAndMacro, 
        macro: macro, 
        unexpectedBetweenMacroAndGenericArguments, 
        genericArguments: genericArguments, 
        unexpectedBetweenGenericArgumentsAndLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndArgumentList, 
        argumentList: argumentList, 
        unexpectedBetweenArgumentListAndRightParen, 
        rightParen: rightParen, 
        unexpectedBetweenRightParenAndTrailingClosure, 
        trailingClosure: trailingClosure, 
        unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures, 
        additionalTrailingClosures: additionalTrailingClosures, 
        unexpectedAfterAdditionalTrailingClosures, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension MacroExpansionExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforePound")
  public var unexpectedBeforePoundToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforePound
    }
    set {
      unexpectedBeforePound = newValue
    }
  }
  
  @available(*, deprecated, renamed: "pound")
  public var poundToken: TokenSyntax {
    get {
      return pound
    }
    set {
      pound = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenPoundAndMacro")
  public var unexpectedBetweenPoundTokenAndMacro: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPoundAndMacro
    }
    set {
      unexpectedBetweenPoundAndMacro = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with pound argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforePoundToken: UnexpectedNodesSyntax? = nil,
      poundToken: TokenSyntax = .poundToken(),
      _ unexpectedBetweenPoundTokenAndMacro: UnexpectedNodesSyntax? = nil,
      macro: TokenSyntax,
      _ unexpectedBetweenMacroAndGenericArguments: UnexpectedNodesSyntax? = nil,
      genericArguments: GenericArgumentClauseSyntax? = nil,
      _ unexpectedBetweenGenericArgumentsAndLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax? = nil,
      _ unexpectedBetweenLeftParenAndArgumentList: UnexpectedNodesSyntax? = nil,
      argumentList: TupleExprElementListSyntax,
      _ unexpectedBetweenArgumentListAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax? = nil,
      _ unexpectedBetweenRightParenAndTrailingClosure: UnexpectedNodesSyntax? = nil,
      trailingClosure: ClosureExprSyntax? = nil,
      _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
      additionalTrailingClosures: MultipleTrailingClosureElementListSyntax? = nil,
      _ unexpectedAfterAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforePoundToken, 
        pound: poundToken, 
        unexpectedBetweenPoundTokenAndMacro, 
        macro: macro, 
        unexpectedBetweenMacroAndGenericArguments, 
        genericArguments: genericArguments, 
        unexpectedBetweenGenericArgumentsAndLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndArgumentList, 
        argumentList: argumentList, 
        unexpectedBetweenArgumentListAndRightParen, 
        rightParen: rightParen, 
        unexpectedBetweenRightParenAndTrailingClosure, 
        trailingClosure: trailingClosure, 
        unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures, 
        additionalTrailingClosures: additionalTrailingClosures, 
        unexpectedAfterAdditionalTrailingClosures, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension MemberAccessExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenBaseAndPeriod")
  public var unexpectedBetweenBaseAndDot: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenBaseAndPeriod
    }
    set {
      unexpectedBetweenBaseAndPeriod = newValue
    }
  }
  
  @available(*, deprecated, renamed: "period")
  public var dot: TokenSyntax {
    get {
      return period
    }
    set {
      period = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenPeriodAndName")
  public var unexpectedBetweenDotAndName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPeriodAndName
    }
    set {
      unexpectedBetweenPeriodAndName = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with period argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeBase: UnexpectedNodesSyntax? = nil,
      base: (some ExprSyntaxProtocol)? = ExprSyntax?.none,
      _ unexpectedBetweenBaseAndDot: UnexpectedNodesSyntax? = nil,
      dot: TokenSyntax = .periodToken(),
      _ unexpectedBetweenDotAndName: UnexpectedNodesSyntax? = nil,
      name: TokenSyntax,
      _ unexpectedBetweenNameAndDeclNameArguments: UnexpectedNodesSyntax? = nil,
      declNameArguments: DeclNameArgumentsSyntax? = nil,
      _ unexpectedAfterDeclNameArguments: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeBase, 
        base: base, 
        unexpectedBetweenBaseAndDot, 
        period: dot, 
        unexpectedBetweenDotAndName, 
        name: name, 
        unexpectedBetweenNameAndDeclNameArguments, 
        declNameArguments: declNameArguments, 
        unexpectedAfterDeclNameArguments, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension MetatypeTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenPeriodAndMetatypeSpecifier")
  public var unexpectedBetweenPeriodAndTypeOrProtocol: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPeriodAndMetatypeSpecifier
    }
    set {
      unexpectedBetweenPeriodAndMetatypeSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "metatypeSpecifier")
  public var typeOrProtocol: TokenSyntax {
    get {
      return metatypeSpecifier
    }
    set {
      metatypeSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterMetatypeSpecifier")
  public var unexpectedAfterTypeOrProtocol: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterMetatypeSpecifier
    }
    set {
      unexpectedAfterMetatypeSpecifier = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with metatypeSpecifier argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeBaseType: UnexpectedNodesSyntax? = nil,
      baseType: some TypeSyntaxProtocol,
      _ unexpectedBetweenBaseTypeAndPeriod: UnexpectedNodesSyntax? = nil,
      period: TokenSyntax = .periodToken(),
      _ unexpectedBetweenPeriodAndTypeOrProtocol: UnexpectedNodesSyntax? = nil,
      typeOrProtocol: TokenSyntax,
      _ unexpectedAfterTypeOrProtocol: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeBaseType, 
        baseType: baseType, 
        unexpectedBetweenBaseTypeAndPeriod, 
        period: period, 
        unexpectedBetweenPeriodAndTypeOrProtocol, 
        metatypeSpecifier: typeOrProtocol, 
        unexpectedAfterTypeOrProtocol, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension MoveExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeConsumeKeyword")
  public var unexpectedBeforeMoveKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeConsumeKeyword
    }
    set {
      unexpectedBeforeConsumeKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "consumeKeyword")
  public var moveKeyword: TokenSyntax {
    get {
      return consumeKeyword
    }
    set {
      consumeKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenConsumeKeywordAndExpression")
  public var unexpectedBetweenMoveKeywordAndExpression: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenConsumeKeywordAndExpression
    }
    set {
      unexpectedBetweenConsumeKeywordAndExpression = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with consumeKeyword argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeMoveKeyword: UnexpectedNodesSyntax? = nil,
      moveKeyword: TokenSyntax,
      _ unexpectedBetweenMoveKeywordAndExpression: UnexpectedNodesSyntax? = nil,
      expression: some ExprSyntaxProtocol,
      _ unexpectedAfterExpression: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeMoveKeyword, 
        consumeKeyword: moveKeyword, 
        unexpectedBetweenMoveKeywordAndExpression, 
        expression: expression, 
        unexpectedAfterExpression, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension NamedOpaqueReturnTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeGenericParameterClause")
  public var unexpectedBeforeGenericParameters: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeGenericParameterClause
    }
    set {
      unexpectedBeforeGenericParameterClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "genericParameterClause")
  public var genericParameters: GenericParameterClauseSyntax {
    get {
      return genericParameterClause
    }
    set {
      genericParameterClause = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenGenericParameterClauseAndBaseType")
  public var unexpectedBetweenGenericParametersAndBaseType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenGenericParameterClauseAndBaseType
    }
    set {
      unexpectedBetweenGenericParameterClauseAndBaseType = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with genericParameterClause argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeGenericParameters: UnexpectedNodesSyntax? = nil,
      genericParameters: GenericParameterClauseSyntax,
      _ unexpectedBetweenGenericParametersAndBaseType: UnexpectedNodesSyntax? = nil,
      baseType: some TypeSyntaxProtocol,
      _ unexpectedAfterBaseType: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeGenericParameters, 
        genericParameterClause: genericParameters, 
        unexpectedBetweenGenericParametersAndBaseType, 
        baseType: baseType, 
        unexpectedAfterBaseType, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension OperatorDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeFixitySpecifier")
  public var unexpectedBeforeFixity: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeFixitySpecifier
    }
    set {
      unexpectedBeforeFixitySpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "fixitySpecifier")
  public var fixity: TokenSyntax {
    get {
      return fixitySpecifier
    }
    set {
      fixitySpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenFixitySpecifierAndOperatorKeyword")
  public var unexpectedBetweenFixityAndOperatorKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenFixitySpecifierAndOperatorKeyword
    }
    set {
      unexpectedBetweenFixitySpecifierAndOperatorKeyword = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with fixitySpecifier argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeFixity: UnexpectedNodesSyntax? = nil,
      fixity: TokenSyntax,
      _ unexpectedBetweenFixityAndOperatorKeyword: UnexpectedNodesSyntax? = nil,
      operatorKeyword: TokenSyntax = .keyword(.operator),
      _ unexpectedBetweenOperatorKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
      identifier: TokenSyntax,
      _ unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes: UnexpectedNodesSyntax? = nil,
      operatorPrecedenceAndTypes: OperatorPrecedenceAndTypesSyntax? = nil,
      _ unexpectedAfterOperatorPrecedenceAndTypes: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeFixity, 
        fixitySpecifier: fixity, 
        unexpectedBetweenFixityAndOperatorKeyword, 
        operatorKeyword: operatorKeyword, 
        unexpectedBetweenOperatorKeywordAndIdentifier, 
        identifier: identifier, 
        unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes, 
        operatorPrecedenceAndTypes: operatorPrecedenceAndTypes, 
        unexpectedAfterOperatorPrecedenceAndTypes, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension OptionalBindingConditionSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeBindingSpecifier")
  public var unexpectedBeforeBindingKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeBindingSpecifier
    }
    set {
      unexpectedBeforeBindingSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "bindingSpecifier")
  public var bindingKeyword: TokenSyntax {
    get {
      return bindingSpecifier
    }
    set {
      bindingSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenBindingSpecifierAndPattern")
  public var unexpectedBetweenBindingKeywordAndPattern: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenBindingSpecifierAndPattern
    }
    set {
      unexpectedBetweenBindingSpecifierAndPattern = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with bindingSpecifier argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeBindingKeyword: UnexpectedNodesSyntax? = nil,
      bindingKeyword: TokenSyntax,
      _ unexpectedBetweenBindingKeywordAndPattern: UnexpectedNodesSyntax? = nil,
      pattern: some PatternSyntaxProtocol,
      _ unexpectedBetweenPatternAndTypeAnnotation: UnexpectedNodesSyntax? = nil,
      typeAnnotation: TypeAnnotationSyntax? = nil,
      _ unexpectedBetweenTypeAnnotationAndInitializer: UnexpectedNodesSyntax? = nil,
      initializer: InitializerClauseSyntax? = nil,
      _ unexpectedAfterInitializer: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeBindingKeyword, 
        bindingSpecifier: bindingKeyword, 
        unexpectedBetweenBindingKeywordAndPattern, 
        pattern: pattern, 
        unexpectedBetweenPatternAndTypeAnnotation, 
        typeAnnotation: typeAnnotation, 
        unexpectedBetweenTypeAnnotationAndInitializer, 
        initializer: initializer, 
        unexpectedAfterInitializer, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension PostfixUnaryExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenExpressionAndOperator")
  public var unexpectedBetweenExpressionAndOperatorToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenExpressionAndOperator
    }
    set {
      unexpectedBetweenExpressionAndOperator = newValue
    }
  }
  
  @available(*, deprecated, renamed: "operator")
  public var operatorToken: TokenSyntax {
    get {
      return `operator`
    }
    set {
      `operator` = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterOperator")
  public var unexpectedAfterOperatorToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterOperator
    }
    set {
      unexpectedAfterOperator = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with operator argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeExpression: UnexpectedNodesSyntax? = nil,
      expression: some ExprSyntaxProtocol,
      _ unexpectedBetweenExpressionAndOperatorToken: UnexpectedNodesSyntax? = nil,
      operatorToken: TokenSyntax,
      _ unexpectedAfterOperatorToken: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeExpression, 
        expression: expression, 
        unexpectedBetweenExpressionAndOperatorToken, 
        operator: operatorToken, 
        unexpectedAfterOperatorToken, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension PoundSourceLocationArgsSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeFileLabel")
  public var unexpectedBeforeFileArgLabel: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeFileLabel
    }
    set {
      unexpectedBeforeFileLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "fileLabel")
  public var fileArgLabel: TokenSyntax {
    get {
      return fileLabel
    }
    set {
      fileLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenFileLabelAndFileColon")
  public var unexpectedBetweenFileArgLabelAndFileArgColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenFileLabelAndFileColon
    }
    set {
      unexpectedBetweenFileLabelAndFileColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "fileColon")
  public var fileArgColon: TokenSyntax {
    get {
      return fileColon
    }
    set {
      fileColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenFileColonAndFileName")
  public var unexpectedBetweenFileArgColonAndFileName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenFileColonAndFileName
    }
    set {
      unexpectedBetweenFileColonAndFileName = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenCommaAndLineLabel")
  public var unexpectedBetweenCommaAndLineArgLabel: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenCommaAndLineLabel
    }
    set {
      unexpectedBetweenCommaAndLineLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "lineLabel")
  public var lineArgLabel: TokenSyntax {
    get {
      return lineLabel
    }
    set {
      lineLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLineLabelAndLineColon")
  public var unexpectedBetweenLineArgLabelAndLineArgColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLineLabelAndLineColon
    }
    set {
      unexpectedBetweenLineLabelAndLineColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "lineColon")
  public var lineArgColon: TokenSyntax {
    get {
      return lineColon
    }
    set {
      lineColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLineColonAndLineNumber")
  public var unexpectedBetweenLineArgColonAndLineNumber: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLineColonAndLineNumber
    }
    set {
      unexpectedBetweenLineColonAndLineNumber = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with fileLabel, fileColon, lineLabel, lineColon argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeFileArgLabel: UnexpectedNodesSyntax? = nil,
      fileArgLabel: TokenSyntax = .keyword(.file),
      _ unexpectedBetweenFileArgLabelAndFileArgColon: UnexpectedNodesSyntax? = nil,
      fileArgColon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenFileArgColonAndFileName: UnexpectedNodesSyntax? = nil,
      fileName: StringLiteralExprSyntax,
      _ unexpectedBetweenFileNameAndComma: UnexpectedNodesSyntax? = nil,
      comma: TokenSyntax = .commaToken(),
      _ unexpectedBetweenCommaAndLineArgLabel: UnexpectedNodesSyntax? = nil,
      lineArgLabel: TokenSyntax = .keyword(.line),
      _ unexpectedBetweenLineArgLabelAndLineArgColon: UnexpectedNodesSyntax? = nil,
      lineArgColon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenLineArgColonAndLineNumber: UnexpectedNodesSyntax? = nil,
      lineNumber: TokenSyntax,
      _ unexpectedAfterLineNumber: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeFileArgLabel, 
        fileLabel: fileArgLabel, 
        unexpectedBetweenFileArgLabelAndFileArgColon, 
        fileColon: fileArgColon, 
        unexpectedBetweenFileArgColonAndFileName, 
        fileName: fileName, 
        unexpectedBetweenFileNameAndComma, 
        comma: comma, 
        unexpectedBetweenCommaAndLineArgLabel, 
        lineLabel: lineArgLabel, 
        unexpectedBetweenLineArgLabelAndLineArgColon, 
        lineColon: lineArgColon, 
        unexpectedBetweenLineArgColonAndLineNumber, 
        lineNumber: lineNumber, 
        unexpectedAfterLineNumber, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension PrecedenceGroupAssignmentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAssignmentLabel")
  public var unexpectedBeforeAssignmentKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeAssignmentLabel
    }
    set {
      unexpectedBeforeAssignmentLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "assignmentLabel")
  public var assignmentKeyword: TokenSyntax {
    get {
      return assignmentLabel
    }
    set {
      assignmentLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAssignmentLabelAndColon")
  public var unexpectedBetweenAssignmentKeywordAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAssignmentLabelAndColon
    }
    set {
      unexpectedBetweenAssignmentLabelAndColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndValue")
  public var unexpectedBetweenColonAndFlag: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndValue
    }
    set {
      unexpectedBetweenColonAndValue = newValue
    }
  }
  
  @available(*, deprecated, renamed: "value")
  public var flag: TokenSyntax {
    get {
      return value
    }
    set {
      value = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterValue")
  public var unexpectedAfterFlag: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterValue
    }
    set {
      unexpectedAfterValue = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with assignmentLabel, value argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAssignmentKeyword: UnexpectedNodesSyntax? = nil,
      assignmentKeyword: TokenSyntax = .keyword(.assignment),
      _ unexpectedBetweenAssignmentKeywordAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndFlag: UnexpectedNodesSyntax? = nil,
      flag: TokenSyntax,
      _ unexpectedAfterFlag: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAssignmentKeyword, 
        assignmentLabel: assignmentKeyword, 
        unexpectedBetweenAssignmentKeywordAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndFlag, 
        value: flag, 
        unexpectedAfterFlag, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension PrecedenceGroupAssociativitySyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAssociativityLabel")
  public var unexpectedBeforeAssociativityKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeAssociativityLabel
    }
    set {
      unexpectedBeforeAssociativityLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "associativityLabel")
  public var associativityKeyword: TokenSyntax {
    get {
      return associativityLabel
    }
    set {
      associativityLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAssociativityLabelAndColon")
  public var unexpectedBetweenAssociativityKeywordAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAssociativityLabelAndColon
    }
    set {
      unexpectedBetweenAssociativityLabelAndColon = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with associativityLabel argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAssociativityKeyword: UnexpectedNodesSyntax? = nil,
      associativityKeyword: TokenSyntax = .keyword(.associativity),
      _ unexpectedBetweenAssociativityKeywordAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndValue: UnexpectedNodesSyntax? = nil,
      value: TokenSyntax,
      _ unexpectedAfterValue: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAssociativityKeyword, 
        associativityLabel: associativityKeyword, 
        unexpectedBetweenAssociativityKeywordAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndValue, 
        value: value, 
        unexpectedAfterValue, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension PrecedenceGroupRelationSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeHigherThanOrLowerThanLabel")
  public var unexpectedBeforeHigherThanOrLowerThan: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeHigherThanOrLowerThanLabel
    }
    set {
      unexpectedBeforeHigherThanOrLowerThanLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "higherThanOrLowerThanLabel")
  public var higherThanOrLowerThan: TokenSyntax {
    get {
      return higherThanOrLowerThanLabel
    }
    set {
      higherThanOrLowerThanLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenHigherThanOrLowerThanLabelAndColon")
  public var unexpectedBetweenHigherThanOrLowerThanAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenHigherThanOrLowerThanLabelAndColon
    }
    set {
      unexpectedBetweenHigherThanOrLowerThanLabelAndColon = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with higherThanOrLowerThanLabel argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeHigherThanOrLowerThan: UnexpectedNodesSyntax? = nil,
      higherThanOrLowerThan: TokenSyntax,
      _ unexpectedBetweenHigherThanOrLowerThanAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndOtherNames: UnexpectedNodesSyntax? = nil,
      otherNames: PrecedenceGroupNameListSyntax,
      _ unexpectedAfterOtherNames: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeHigherThanOrLowerThan, 
        higherThanOrLowerThanLabel: higherThanOrLowerThan, 
        unexpectedBetweenHigherThanOrLowerThanAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndOtherNames, 
        otherNames: otherNames, 
        unexpectedAfterOtherNames, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension PrefixOperatorExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeOperator")
  public var unexpectedBeforeOperatorToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeOperator
    }
    set {
      unexpectedBeforeOperator = newValue
    }
  }
  
  @available(*, deprecated, renamed: "operator")
  public var operatorToken: TokenSyntax? {
    get {
      return `operator`
    }
    set {
      `operator` = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenOperatorAndPostfixExpression")
  public var unexpectedBetweenOperatorTokenAndPostfixExpression: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOperatorAndPostfixExpression
    }
    set {
      unexpectedBetweenOperatorAndPostfixExpression = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with operator argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeOperatorToken: UnexpectedNodesSyntax? = nil,
      operatorToken: TokenSyntax? = nil,
      _ unexpectedBetweenOperatorTokenAndPostfixExpression: UnexpectedNodesSyntax? = nil,
      postfixExpression: some ExprSyntaxProtocol,
      _ unexpectedAfterPostfixExpression: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeOperatorToken, 
        operator: operatorToken, 
        unexpectedBetweenOperatorTokenAndPostfixExpression, 
        postfixExpression: postfixExpression, 
        unexpectedAfterPostfixExpression, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension PrimaryAssociatedTypeClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftAngle")
  public var unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftAngle
    }
    set {
      unexpectedBeforeLeftAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftAngle")
  public var leftAngleBracket: TokenSyntax {
    get {
      return leftAngle
    }
    set {
      leftAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftAngleAndPrimaryAssociatedTypeList")
  public var unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftAngleAndPrimaryAssociatedTypeList
    }
    set {
      unexpectedBetweenLeftAngleAndPrimaryAssociatedTypeList = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenPrimaryAssociatedTypeListAndRightAngle")
  public var unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPrimaryAssociatedTypeListAndRightAngle
    }
    set {
      unexpectedBetweenPrimaryAssociatedTypeListAndRightAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightAngle")
  public var rightAngleBracket: TokenSyntax {
    get {
      return rightAngle
    }
    set {
      rightAngle = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterRightAngle")
  public var unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightAngle
    }
    set {
      unexpectedAfterRightAngle = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with leftAngle, rightAngle argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? = nil,
      leftAngleBracket: TokenSyntax = .leftAngleToken(),
      _ unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList: UnexpectedNodesSyntax? = nil,
      primaryAssociatedTypeList: PrimaryAssociatedTypeListSyntax,
      _ unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket: UnexpectedNodesSyntax? = nil,
      rightAngleBracket: TokenSyntax = .rightAngleToken(),
      _ unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftAngleBracket, 
        leftAngle: leftAngleBracket, 
        unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList, 
        primaryAssociatedTypeList: primaryAssociatedTypeList, 
        unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket, 
        rightAngle: rightAngleBracket, 
        unexpectedAfterRightAngleBracket, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension QualifiedDeclNameSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenBaseTypeAndPeriod")
  public var unexpectedBetweenBaseTypeAndDot: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenBaseTypeAndPeriod
    }
    set {
      unexpectedBetweenBaseTypeAndPeriod = newValue
    }
  }
  
  @available(*, deprecated, renamed: "period")
  public var dot: TokenSyntax? {
    get {
      return period
    }
    set {
      period = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenPeriodAndName")
  public var unexpectedBetweenDotAndName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPeriodAndName
    }
    set {
      unexpectedBetweenPeriodAndName = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with period argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeBaseType: UnexpectedNodesSyntax? = nil,
      baseType: (some TypeSyntaxProtocol)? = TypeSyntax?.none,
      _ unexpectedBetweenBaseTypeAndDot: UnexpectedNodesSyntax? = nil,
      dot: TokenSyntax? = nil,
      _ unexpectedBetweenDotAndName: UnexpectedNodesSyntax? = nil,
      name: TokenSyntax,
      _ unexpectedBetweenNameAndArguments: UnexpectedNodesSyntax? = nil,
      arguments: DeclNameArgumentsSyntax? = nil,
      _ unexpectedAfterArguments: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeBaseType, 
        baseType: baseType, 
        unexpectedBetweenBaseTypeAndDot, 
        period: dot, 
        unexpectedBetweenDotAndName, 
        name: name, 
        unexpectedBetweenNameAndArguments, 
        arguments: arguments, 
        unexpectedAfterArguments, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension SourceFileSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenStatementsAndEndOfFileToken")
  public var unexpectedBetweenStatementsAndEOFToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenStatementsAndEndOfFileToken
    }
    set {
      unexpectedBetweenStatementsAndEndOfFileToken = newValue
    }
  }
  
  @available(*, deprecated, renamed: "endOfFileToken")
  public var eofToken: TokenSyntax {
    get {
      return endOfFileToken
    }
    set {
      endOfFileToken = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterEndOfFileToken")
  public var unexpectedAfterEOFToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterEndOfFileToken
    }
    set {
      unexpectedAfterEndOfFileToken = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with endOfFileToken argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeStatements: UnexpectedNodesSyntax? = nil,
      statements: CodeBlockItemListSyntax,
      _ unexpectedBetweenStatementsAndEOFToken: UnexpectedNodesSyntax? = nil,
      eofToken: TokenSyntax = .eof(),
      _ unexpectedAfterEOFToken: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeStatements, 
        statements: statements, 
        unexpectedBetweenStatementsAndEOFToken, 
        endOfFileToken: eofToken, 
        unexpectedAfterEOFToken, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension SubscriptExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenCalledExpressionAndLeftSquare")
  public var unexpectedBetweenCalledExpressionAndLeftBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenCalledExpressionAndLeftSquare
    }
    set {
      unexpectedBetweenCalledExpressionAndLeftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "leftSquare")
  public var leftBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndArgumentList")
  public var unexpectedBetweenLeftBracketAndArgumentList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndArgumentList
    }
    set {
      unexpectedBetweenLeftSquareAndArgumentList = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentListAndRightSquare")
  public var unexpectedBetweenArgumentListAndRightBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentListAndRightSquare
    }
    set {
      unexpectedBetweenArgumentListAndRightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "rightSquare")
  public var rightBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenRightSquareAndTrailingClosure")
  public var unexpectedBetweenRightBracketAndTrailingClosure: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenRightSquareAndTrailingClosure
    }
    set {
      unexpectedBetweenRightSquareAndTrailingClosure = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with leftSquare, rightSquare argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeCalledExpression: UnexpectedNodesSyntax? = nil,
      calledExpression: some ExprSyntaxProtocol,
      _ unexpectedBetweenCalledExpressionAndLeftBracket: UnexpectedNodesSyntax? = nil,
      leftBracket: TokenSyntax = .leftSquareToken(),
      _ unexpectedBetweenLeftBracketAndArgumentList: UnexpectedNodesSyntax? = nil,
      argumentList: TupleExprElementListSyntax,
      _ unexpectedBetweenArgumentListAndRightBracket: UnexpectedNodesSyntax? = nil,
      rightBracket: TokenSyntax = .rightSquareToken(),
      _ unexpectedBetweenRightBracketAndTrailingClosure: UnexpectedNodesSyntax? = nil,
      trailingClosure: ClosureExprSyntax? = nil,
      _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
      additionalTrailingClosures: MultipleTrailingClosureElementListSyntax? = nil,
      _ unexpectedAfterAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeCalledExpression, 
        calledExpression: calledExpression, 
        unexpectedBetweenCalledExpressionAndLeftBracket, 
        leftSquare: leftBracket, 
        unexpectedBetweenLeftBracketAndArgumentList, 
        argumentList: argumentList, 
        unexpectedBetweenArgumentListAndRightBracket, 
        rightSquare: rightBracket, 
        unexpectedBetweenRightBracketAndTrailingClosure, 
        trailingClosure: trailingClosure, 
        unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures, 
        additionalTrailingClosures: additionalTrailingClosures, 
        unexpectedAfterAdditionalTrailingClosures, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension TargetFunctionEntrySyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeTargetLabel")
  public var unexpectedBeforeLabel: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeTargetLabel
    }
    set {
      unexpectedBeforeTargetLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "targetLabel")
  public var label: TokenSyntax {
    get {
      return targetLabel
    }
    set {
      targetLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenTargetLabelAndColon")
  public var unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenTargetLabelAndColon
    }
    set {
      unexpectedBetweenTargetLabelAndColon = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with targetLabel argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLabel: UnexpectedNodesSyntax? = nil,
      label: TokenSyntax = .keyword(.target),
      _ unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonAndDeclname: UnexpectedNodesSyntax? = nil,
      declname: DeclNameSyntax,
      _ unexpectedBetweenDeclnameAndTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingComma: TokenSyntax? = nil,
      _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLabel, 
        targetLabel: label, 
        unexpectedBetweenLabelAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndDeclname, 
        declname: declname, 
        unexpectedBetweenDeclnameAndTrailingComma, 
        trailingComma: trailingComma, 
        unexpectedAfterTrailingComma, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension TernaryExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenFirstChoiceAndColon")
  public var unexpectedBetweenFirstChoiceAndColonMark: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenFirstChoiceAndColon
    }
    set {
      unexpectedBetweenFirstChoiceAndColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "colon")
  public var colonMark: TokenSyntax {
    get {
      return colon
    }
    set {
      colon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndSecondChoice")
  public var unexpectedBetweenColonMarkAndSecondChoice: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndSecondChoice
    }
    set {
      unexpectedBetweenColonAndSecondChoice = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with colon argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeConditionExpression: UnexpectedNodesSyntax? = nil,
      conditionExpression: some ExprSyntaxProtocol,
      _ unexpectedBetweenConditionExpressionAndQuestionMark: UnexpectedNodesSyntax? = nil,
      questionMark: TokenSyntax = .infixQuestionMarkToken(),
      _ unexpectedBetweenQuestionMarkAndFirstChoice: UnexpectedNodesSyntax? = nil,
      firstChoice: some ExprSyntaxProtocol,
      _ unexpectedBetweenFirstChoiceAndColonMark: UnexpectedNodesSyntax? = nil,
      colonMark: TokenSyntax = .colonToken(),
      _ unexpectedBetweenColonMarkAndSecondChoice: UnexpectedNodesSyntax? = nil,
      secondChoice: some ExprSyntaxProtocol,
      _ unexpectedAfterSecondChoice: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeConditionExpression, 
        conditionExpression: conditionExpression, 
        unexpectedBetweenConditionExpressionAndQuestionMark, 
        questionMark: questionMark, 
        unexpectedBetweenQuestionMarkAndFirstChoice, 
        firstChoice: firstChoice, 
        unexpectedBetweenFirstChoiceAndColonMark, 
        colon: colonMark, 
        unexpectedBetweenColonMarkAndSecondChoice, 
        secondChoice: secondChoice, 
        unexpectedAfterSecondChoice, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension TupleExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndElements")
  public var unexpectedBetweenLeftParenAndElementList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndElements
    }
    set {
      unexpectedBetweenLeftParenAndElements = newValue
    }
  }
  
  @available(*, deprecated, renamed: "elements")
  public var elementList: TupleExprElementListSyntax {
    get {
      return elements
    }
    set {
      elements = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenElementsAndRightParen")
  public var unexpectedBetweenElementListAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenElementsAndRightParen
    }
    set {
      unexpectedBetweenElementsAndRightParen = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with elements argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLeftParen: UnexpectedNodesSyntax? = nil,
      leftParen: TokenSyntax = .leftParenToken(),
      _ unexpectedBetweenLeftParenAndElementList: UnexpectedNodesSyntax? = nil,
      elementList: TupleExprElementListSyntax,
      _ unexpectedBetweenElementListAndRightParen: UnexpectedNodesSyntax? = nil,
      rightParen: TokenSyntax = .rightParenToken(),
      _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLeftParen, 
        leftParen: leftParen, 
        unexpectedBetweenLeftParenAndElementList, 
        elements: elementList, 
        unexpectedBetweenElementListAndRightParen, 
        rightParen: rightParen, 
        unexpectedAfterRightParen, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension TuplePatternElementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLabel")
  public var unexpectedBeforeLabelName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLabel
    }
    set {
      unexpectedBeforeLabel = newValue
    }
  }
  
  @available(*, deprecated, renamed: "label")
  public var labelName: TokenSyntax? {
    get {
      return label
    }
    set {
      label = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenLabelAndColon")
  public var unexpectedBetweenLabelNameAndLabelColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLabelAndColon
    }
    set {
      unexpectedBetweenLabelAndColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "colon")
  public var labelColon: TokenSyntax? {
    get {
      return colon
    }
    set {
      colon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndPattern")
  public var unexpectedBetweenLabelColonAndPattern: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndPattern
    }
    set {
      unexpectedBetweenColonAndPattern = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with label, colon argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeLabelName: UnexpectedNodesSyntax? = nil,
      labelName: TokenSyntax? = nil,
      _ unexpectedBetweenLabelNameAndLabelColon: UnexpectedNodesSyntax? = nil,
      labelColon: TokenSyntax? = nil,
      _ unexpectedBetweenLabelColonAndPattern: UnexpectedNodesSyntax? = nil,
      pattern: some PatternSyntaxProtocol,
      _ unexpectedBetweenPatternAndTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingComma: TokenSyntax? = nil,
      _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeLabelName, 
        label: labelName, 
        unexpectedBetweenLabelNameAndLabelColon, 
        colon: labelColon, 
        unexpectedBetweenLabelColonAndPattern, 
        pattern: pattern, 
        unexpectedBetweenPatternAndTrailingComma, 
        trailingComma: trailingComma, 
        unexpectedAfterTrailingComma, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension TupleTypeElementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeInoutKeyword")
  public var unexpectedBeforeInOut: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeInoutKeyword
    }
    set {
      unexpectedBeforeInoutKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "inoutKeyword")
  public var inOut: TokenSyntax? {
    get {
      return inoutKeyword
    }
    set {
      inoutKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenInoutKeywordAndName")
  public var unexpectedBetweenInOutAndName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenInoutKeywordAndName
    }
    set {
      unexpectedBetweenInoutKeywordAndName = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with inoutKeyword argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeInOut: UnexpectedNodesSyntax? = nil,
      inOut: TokenSyntax? = nil,
      _ unexpectedBetweenInOutAndName: UnexpectedNodesSyntax? = nil,
      name: TokenSyntax? = nil,
      _ unexpectedBetweenNameAndSecondName: UnexpectedNodesSyntax? = nil,
      secondName: TokenSyntax? = nil,
      _ unexpectedBetweenSecondNameAndColon: UnexpectedNodesSyntax? = nil,
      colon: TokenSyntax? = nil,
      _ unexpectedBetweenColonAndType: UnexpectedNodesSyntax? = nil,
      type: some TypeSyntaxProtocol,
      _ unexpectedBetweenTypeAndEllipsis: UnexpectedNodesSyntax? = nil,
      ellipsis: TokenSyntax? = nil,
      _ unexpectedBetweenEllipsisAndInitializer: UnexpectedNodesSyntax? = nil,
      initializer: InitializerClauseSyntax? = nil,
      _ unexpectedBetweenInitializerAndTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingComma: TokenSyntax? = nil,
      _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeInOut, 
        inoutKeyword: inOut, 
        unexpectedBetweenInOutAndName, 
        name: name, 
        unexpectedBetweenNameAndSecondName, 
        secondName: secondName, 
        unexpectedBetweenSecondNameAndColon, 
        colon: colon, 
        unexpectedBetweenColonAndType, 
        type: type, 
        unexpectedBetweenTypeAndEllipsis, 
        ellipsis: ellipsis, 
        unexpectedBetweenEllipsisAndInitializer, 
        initializer: initializer, 
        unexpectedBetweenInitializerAndTrailingComma, 
        trailingComma: trailingComma, 
        unexpectedAfterTrailingComma, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension UnresolvedAsExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAsKeyword")
  public var unexpectedBeforeAsTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeAsKeyword
    }
    set {
      unexpectedBeforeAsKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "asKeyword")
  public var asTok: TokenSyntax {
    get {
      return asKeyword
    }
    set {
      asKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenAsKeywordAndQuestionOrExclamationMark")
  public var unexpectedBetweenAsTokAndQuestionOrExclamationMark: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAsKeywordAndQuestionOrExclamationMark
    }
    set {
      unexpectedBetweenAsKeywordAndQuestionOrExclamationMark = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with asKeyword argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAsTok: UnexpectedNodesSyntax? = nil,
      asTok: TokenSyntax = .keyword(.as),
      _ unexpectedBetweenAsTokAndQuestionOrExclamationMark: UnexpectedNodesSyntax? = nil,
      questionOrExclamationMark: TokenSyntax? = nil,
      _ unexpectedAfterQuestionOrExclamationMark: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAsTok, 
        asKeyword: asTok, 
        unexpectedBetweenAsTokAndQuestionOrExclamationMark, 
        questionOrExclamationMark: questionOrExclamationMark, 
        unexpectedAfterQuestionOrExclamationMark, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension UnresolvedIsExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeIsKeyword")
  public var unexpectedBeforeIsTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeIsKeyword
    }
    set {
      unexpectedBeforeIsKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "isKeyword")
  public var isTok: TokenSyntax {
    get {
      return isKeyword
    }
    set {
      isKeyword = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterIsKeyword")
  public var unexpectedAfterIsTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterIsKeyword
    }
    set {
      unexpectedAfterIsKeyword = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with isKeyword argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeIsTok: UnexpectedNodesSyntax? = nil,
      isTok: TokenSyntax = .keyword(.is),
      _ unexpectedAfterIsTok: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeIsTok, 
        isKeyword: isTok, 
        unexpectedAfterIsTok, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension UnresolvedTernaryExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenFirstChoiceAndColon")
  public var unexpectedBetweenFirstChoiceAndColonMark: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenFirstChoiceAndColon
    }
    set {
      unexpectedBetweenFirstChoiceAndColon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "colon")
  public var colonMark: TokenSyntax {
    get {
      return colon
    }
    set {
      colon = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedAfterColon")
  public var unexpectedAfterColonMark: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterColon
    }
    set {
      unexpectedAfterColon = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with colon argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeQuestionMark: UnexpectedNodesSyntax? = nil,
      questionMark: TokenSyntax = .infixQuestionMarkToken(),
      _ unexpectedBetweenQuestionMarkAndFirstChoice: UnexpectedNodesSyntax? = nil,
      firstChoice: some ExprSyntaxProtocol,
      _ unexpectedBetweenFirstChoiceAndColonMark: UnexpectedNodesSyntax? = nil,
      colonMark: TokenSyntax = .colonToken(),
      _ unexpectedAfterColonMark: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeQuestionMark, 
        questionMark: questionMark, 
        unexpectedBetweenQuestionMarkAndFirstChoice, 
        firstChoice: firstChoice, 
        unexpectedBetweenFirstChoiceAndColonMark, 
        colon: colonMark, 
        unexpectedAfterColonMark, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension ValueBindingPatternSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeBindingSpecifier")
  public var unexpectedBeforeBindingKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeBindingSpecifier
    }
    set {
      unexpectedBeforeBindingSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "bindingSpecifier")
  public var bindingKeyword: TokenSyntax {
    get {
      return bindingSpecifier
    }
    set {
      bindingSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenBindingSpecifierAndValuePattern")
  public var unexpectedBetweenBindingKeywordAndValuePattern: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenBindingSpecifierAndValuePattern
    }
    set {
      unexpectedBetweenBindingSpecifierAndValuePattern = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with bindingSpecifier argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeBindingKeyword: UnexpectedNodesSyntax? = nil,
      bindingKeyword: TokenSyntax,
      _ unexpectedBetweenBindingKeywordAndValuePattern: UnexpectedNodesSyntax? = nil,
      valuePattern: some PatternSyntaxProtocol,
      _ unexpectedAfterValuePattern: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeBindingKeyword, 
        bindingSpecifier: bindingKeyword, 
        unexpectedBetweenBindingKeywordAndValuePattern, 
        valuePattern: valuePattern, 
        unexpectedAfterValuePattern, 
        trailingTrivia: trailingTrivia
      )
  }
}

extension VariableDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndBindingSpecifier")
  public var unexpectedBetweenModifiersAndBindingKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenModifiersAndBindingSpecifier
    }
    set {
      unexpectedBetweenModifiersAndBindingSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "bindingSpecifier")
  public var bindingKeyword: TokenSyntax {
    get {
      return bindingSpecifier
    }
    set {
      bindingSpecifier = newValue
    }
  }
  
  @available(*, deprecated, renamed: "unexpectedBetweenBindingSpecifierAndBindings")
  public var unexpectedBetweenBindingKeywordAndBindings: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenBindingSpecifierAndBindings
    }
    set {
      unexpectedBetweenBindingSpecifierAndBindings = newValue
    }
  }
  
  @available(*, deprecated, message: "Use an initializer with bindingSpecifier argument(s).")
  @_disfavoredOverload
  public init(
      leadingTrivia: Trivia? = nil,
      _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
      attributes: AttributeListSyntax? = nil,
      _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
      modifiers: ModifierListSyntax? = nil,
      _ unexpectedBetweenModifiersAndBindingKeyword: UnexpectedNodesSyntax? = nil,
      bindingKeyword: TokenSyntax,
      _ unexpectedBetweenBindingKeywordAndBindings: UnexpectedNodesSyntax? = nil,
      bindings: PatternBindingListSyntax,
      _ unexpectedAfterBindings: UnexpectedNodesSyntax? = nil,
      trailingTrivia: Trivia? = nil
    
  ) {
    self.init(
        leadingTrivia: leadingTrivia, 
        unexpectedBeforeAttributes, 
        attributes: attributes, 
        unexpectedBetweenAttributesAndModifiers, 
        modifiers: modifiers, 
        unexpectedBetweenModifiersAndBindingKeyword, 
        bindingSpecifier: bindingKeyword, 
        unexpectedBetweenBindingKeywordAndBindings, 
        bindings: bindings, 
        unexpectedAfterBindings, 
        trailingTrivia: trailingTrivia
      )
  }
}
