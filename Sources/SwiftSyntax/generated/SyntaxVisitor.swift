//// Automatically generated by generate-swiftsyntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

/// The enum describes how the ``SyntaxVisitor`` should continue after visiting
/// the current node.
public enum SyntaxVisitorContinueKind {
  /// The visitor should visit the descendants of the current node.
  case visitChildren
  /// The visitor should avoid visiting the descendants of the current node.
  case skipChildren
}

open class SyntaxVisitor {
  public let viewMode: SyntaxTreeViewMode
  
  public init(viewMode: SyntaxTreeViewMode) {
    self.viewMode = viewMode
  }
  
  /// Walk all nodes of the given syntax tree, calling the corresponding `visit`
  /// function for every node that is being visited.
  public func walk(_ node: some SyntaxProtocol) {
    visit(node.data)
  }
  
  /// Visiting ``AccessorBlockSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AccessorBlockSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AccessorBlockSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AccessorBlockSyntax) {
  }
  
  /// Visiting ``AccessorDeclListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AccessorDeclListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AccessorDeclListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AccessorDeclListSyntax) {
  }
  
  /// Visiting ``AccessorDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AccessorDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AccessorDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AccessorDeclSyntax) {
  }
  
  /// Visiting ``AccessorEffectSpecifiersSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AccessorEffectSpecifiersSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AccessorEffectSpecifiersSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AccessorEffectSpecifiersSyntax) {
  }
  
  /// Visiting ``AccessorParametersSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AccessorParametersSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AccessorParametersSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AccessorParametersSyntax) {
  }
  
  /// Visiting ``ActorDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ActorDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ActorDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ActorDeclSyntax) {
  }
  
  /// Visiting ``ArrayElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ArrayElementListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ArrayElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ArrayElementListSyntax) {
  }
  
  /// Visiting ``ArrayElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ArrayElementSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ArrayElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ArrayElementSyntax) {
  }
  
  /// Visiting ``ArrayExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ArrayExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ArrayExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ArrayExprSyntax) {
  }
  
  /// Visiting ``ArrayTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ArrayTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ArrayTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ArrayTypeSyntax) {
  }
  
  /// Visiting ``ArrowExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ArrowExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ArrowExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ArrowExprSyntax) {
  }
  
  /// Visiting ``AsExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AsExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AsExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AsExprSyntax) {
  }
  
  /// Visiting ``AssignmentExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AssignmentExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AssignmentExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AssignmentExprSyntax) {
  }
  
  /// Visiting ``AssociatedTypeDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AssociatedTypeDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AssociatedTypeDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AssociatedTypeDeclSyntax) {
  }
  
  /// Visiting ``AttributeListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AttributeListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AttributeListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AttributeListSyntax) {
  }
  
  /// Visiting ``AttributeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AttributeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AttributeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AttributeSyntax) {
  }
  
  /// Visiting ``AttributedTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AttributedTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AttributedTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AttributedTypeSyntax) {
  }
  
  /// Visiting ``AvailabilityArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AvailabilityArgumentListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AvailabilityArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AvailabilityArgumentListSyntax) {
  }
  
  /// Visiting ``AvailabilityArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AvailabilityArgumentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AvailabilityArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AvailabilityArgumentSyntax) {
  }
  
  /// Visiting ``AvailabilityConditionSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AvailabilityConditionSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AvailabilityConditionSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AvailabilityConditionSyntax) {
  }
  
  /// Visiting ``AvailabilityLabeledArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AvailabilityLabeledArgumentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AvailabilityLabeledArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AvailabilityLabeledArgumentSyntax) {
  }
  
  /// Visiting ``AwaitExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AwaitExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``AwaitExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AwaitExprSyntax) {
  }
  
  /// Visiting ``BackDeployedAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: BackDeployedAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``BackDeployedAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: BackDeployedAttributeArgumentsSyntax) {
  }
  
  /// Visiting ``BinaryOperatorExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: BinaryOperatorExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``BinaryOperatorExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: BinaryOperatorExprSyntax) {
  }
  
  /// Visiting ``BooleanLiteralExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: BooleanLiteralExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``BooleanLiteralExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: BooleanLiteralExprSyntax) {
  }
  
  /// Visiting ``BorrowExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: BorrowExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``BorrowExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: BorrowExprSyntax) {
  }
  
  /// Visiting ``BreakStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: BreakStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``BreakStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: BreakStmtSyntax) {
  }
  
  /// Visiting ``CanImportExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CanImportExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``CanImportExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CanImportExprSyntax) {
  }
  
  /// Visiting ``CanImportVersionInfoSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CanImportVersionInfoSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``CanImportVersionInfoSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CanImportVersionInfoSyntax) {
  }
  
  /// Visiting ``CatchClauseListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CatchClauseListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``CatchClauseListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CatchClauseListSyntax) {
  }
  
  /// Visiting ``CatchClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CatchClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``CatchClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CatchClauseSyntax) {
  }
  
  /// Visiting ``CatchItemListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CatchItemListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``CatchItemListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CatchItemListSyntax) {
  }
  
  /// Visiting ``CatchItemSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CatchItemSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``CatchItemSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CatchItemSyntax) {
  }
  
  /// Visiting ``ClassDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClassDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ClassDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClassDeclSyntax) {
  }
  
  /// Visiting ``ClassRestrictionTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClassRestrictionTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ClassRestrictionTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClassRestrictionTypeSyntax) {
  }
  
  /// Visiting ``ClosureCaptureClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureCaptureClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ClosureCaptureClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureCaptureClauseSyntax) {
  }
  
  /// Visiting ``ClosureCaptureListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureCaptureListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ClosureCaptureListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureCaptureListSyntax) {
  }
  
  /// Visiting ``ClosureCaptureSpecifierSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureCaptureSpecifierSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ClosureCaptureSpecifierSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureCaptureSpecifierSyntax) {
  }
  
  /// Visiting ``ClosureCaptureSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureCaptureSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ClosureCaptureSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureCaptureSyntax) {
  }
  
  /// Visiting ``ClosureExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ClosureExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureExprSyntax) {
  }
  
  /// Visiting ``ClosureParameterClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureParameterClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ClosureParameterClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureParameterClauseSyntax) {
  }
  
  /// Visiting ``ClosureParameterListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureParameterListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ClosureParameterListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureParameterListSyntax) {
  }
  
  /// Visiting ``ClosureParameterSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureParameterSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ClosureParameterSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureParameterSyntax) {
  }
  
  /// Visiting ``ClosureShorthandParameterListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureShorthandParameterListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ClosureShorthandParameterListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureShorthandParameterListSyntax) {
  }
  
  /// Visiting ``ClosureShorthandParameterSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureShorthandParameterSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ClosureShorthandParameterSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureShorthandParameterSyntax) {
  }
  
  /// Visiting ``ClosureSignatureSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureSignatureSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ClosureSignatureSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureSignatureSyntax) {
  }
  
  /// Visiting ``CodeBlockItemListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CodeBlockItemListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``CodeBlockItemListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CodeBlockItemListSyntax) {
  }
  
  /// Visiting ``CodeBlockItemSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CodeBlockItemSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``CodeBlockItemSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CodeBlockItemSyntax) {
  }
  
  /// Visiting ``CodeBlockSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CodeBlockSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``CodeBlockSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CodeBlockSyntax) {
  }
  
  /// Visiting ``CompositionTypeElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CompositionTypeElementListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``CompositionTypeElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CompositionTypeElementListSyntax) {
  }
  
  /// Visiting ``CompositionTypeElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CompositionTypeElementSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``CompositionTypeElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CompositionTypeElementSyntax) {
  }
  
  /// Visiting ``CompositionTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CompositionTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``CompositionTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CompositionTypeSyntax) {
  }
  
  /// Visiting ``ConditionElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ConditionElementListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ConditionElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ConditionElementListSyntax) {
  }
  
  /// Visiting ``ConditionElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ConditionElementSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ConditionElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ConditionElementSyntax) {
  }
  
  /// Visiting ``ConformanceRequirementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ConformanceRequirementSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ConformanceRequirementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ConformanceRequirementSyntax) {
  }
  
  /// Visiting ``ConsumeExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ConsumeExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ConsumeExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ConsumeExprSyntax) {
  }
  
  /// Visiting ``ContinueStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ContinueStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ContinueStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ContinueStmtSyntax) {
  }
  
  /// Visiting ``ConventionAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ConventionAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ConventionAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ConventionAttributeArgumentsSyntax) {
  }
  
  /// Visiting ``ConventionWitnessMethodAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ConventionWitnessMethodAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ConventionWitnessMethodAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ConventionWitnessMethodAttributeArgumentsSyntax) {
  }
  
  /// Visiting ``CopyExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CopyExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``CopyExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CopyExprSyntax) {
  }
  
  /// Visiting ``DeclModifierDetailSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclModifierDetailSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DeclModifierDetailSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclModifierDetailSyntax) {
  }
  
  /// Visiting ``DeclModifierListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclModifierListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DeclModifierListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclModifierListSyntax) {
  }
  
  /// Visiting ``DeclModifierSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclModifierSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DeclModifierSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclModifierSyntax) {
  }
  
  /// Visiting ``DeclNameArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclNameArgumentListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DeclNameArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclNameArgumentListSyntax) {
  }
  
  /// Visiting ``DeclNameArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclNameArgumentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DeclNameArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclNameArgumentSyntax) {
  }
  
  /// Visiting ``DeclNameArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclNameArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DeclNameArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclNameArgumentsSyntax) {
  }
  
  /// Visiting ``DeclNameSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclNameSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DeclNameSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclNameSyntax) {
  }
  
  /// Visiting ``DeferStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeferStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DeferStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeferStmtSyntax) {
  }
  
  /// Visiting ``DeinitializerDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeinitializerDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DeinitializerDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeinitializerDeclSyntax) {
  }
  
  /// Visiting ``DeinitializerEffectSpecifiersSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeinitializerEffectSpecifiersSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DeinitializerEffectSpecifiersSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeinitializerEffectSpecifiersSyntax) {
  }
  
  /// Visiting ``DerivativeAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DerivativeAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DerivativeAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DerivativeAttributeArgumentsSyntax) {
  }
  
  /// Visiting ``DesignatedTypeListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DesignatedTypeListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DesignatedTypeListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DesignatedTypeListSyntax) {
  }
  
  /// Visiting ``DesignatedTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DesignatedTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DesignatedTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DesignatedTypeSyntax) {
  }
  
  /// Visiting ``DictionaryElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DictionaryElementListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DictionaryElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DictionaryElementListSyntax) {
  }
  
  /// Visiting ``DictionaryElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DictionaryElementSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DictionaryElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DictionaryElementSyntax) {
  }
  
  /// Visiting ``DictionaryExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DictionaryExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DictionaryExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DictionaryExprSyntax) {
  }
  
  /// Visiting ``DictionaryTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DictionaryTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DictionaryTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DictionaryTypeSyntax) {
  }
  
  /// Visiting ``DifferentiabilityArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DifferentiabilityArgumentListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DifferentiabilityArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DifferentiabilityArgumentListSyntax) {
  }
  
  /// Visiting ``DifferentiabilityArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DifferentiabilityArgumentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DifferentiabilityArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DifferentiabilityArgumentSyntax) {
  }
  
  /// Visiting ``DifferentiabilityArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DifferentiabilityArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DifferentiabilityArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DifferentiabilityArgumentsSyntax) {
  }
  
  /// Visiting ``DifferentiabilityWithRespectToArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DifferentiabilityWithRespectToArgumentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DifferentiabilityWithRespectToArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DifferentiabilityWithRespectToArgumentSyntax) {
  }
  
  /// Visiting ``DifferentiableAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DifferentiableAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DifferentiableAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DifferentiableAttributeArgumentsSyntax) {
  }
  
  /// Visiting ``DiscardAssignmentExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DiscardAssignmentExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DiscardAssignmentExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DiscardAssignmentExprSyntax) {
  }
  
  /// Visiting ``DiscardStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DiscardStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DiscardStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DiscardStmtSyntax) {
  }
  
  /// Visiting ``DoStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DoStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DoStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DoStmtSyntax) {
  }
  
  /// Visiting ``DocumentationAttributeArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DocumentationAttributeArgumentListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DocumentationAttributeArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DocumentationAttributeArgumentListSyntax) {
  }
  
  /// Visiting ``DocumentationAttributeArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DocumentationAttributeArgumentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DocumentationAttributeArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DocumentationAttributeArgumentSyntax) {
  }
  
  /// Visiting ``DynamicReplacementAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DynamicReplacementAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``DynamicReplacementAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DynamicReplacementAttributeArgumentsSyntax) {
  }
  
  /// Visiting ``EditorPlaceholderDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EditorPlaceholderDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``EditorPlaceholderDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EditorPlaceholderDeclSyntax) {
  }
  
  /// Visiting ``EditorPlaceholderExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EditorPlaceholderExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``EditorPlaceholderExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EditorPlaceholderExprSyntax) {
  }
  
  /// Visiting ``EffectsAttributeArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EffectsAttributeArgumentListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``EffectsAttributeArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EffectsAttributeArgumentListSyntax) {
  }
  
  /// Visiting ``EnumCaseDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumCaseDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``EnumCaseDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumCaseDeclSyntax) {
  }
  
  /// Visiting ``EnumCaseElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumCaseElementListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``EnumCaseElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumCaseElementListSyntax) {
  }
  
  /// Visiting ``EnumCaseElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumCaseElementSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``EnumCaseElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumCaseElementSyntax) {
  }
  
  /// Visiting ``EnumCaseParameterClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumCaseParameterClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``EnumCaseParameterClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumCaseParameterClauseSyntax) {
  }
  
  /// Visiting ``EnumCaseParameterListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumCaseParameterListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``EnumCaseParameterListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumCaseParameterListSyntax) {
  }
  
  /// Visiting ``EnumCaseParameterSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumCaseParameterSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``EnumCaseParameterSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumCaseParameterSyntax) {
  }
  
  /// Visiting ``EnumDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``EnumDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumDeclSyntax) {
  }
  
  /// Visiting ``ExposeAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ExposeAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ExposeAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ExposeAttributeArgumentsSyntax) {
  }
  
  /// Visiting ``ExprListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ExprListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ExprListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ExprListSyntax) {
  }
  
  /// Visiting ``ExpressionPatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ExpressionPatternSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ExpressionPatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ExpressionPatternSyntax) {
  }
  
  /// Visiting ``ExpressionSegmentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ExpressionSegmentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ExpressionSegmentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ExpressionSegmentSyntax) {
  }
  
  /// Visiting ``ExpressionStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ExpressionStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ExpressionStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ExpressionStmtSyntax) {
  }
  
  /// Visiting ``ExtensionDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ExtensionDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ExtensionDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ExtensionDeclSyntax) {
  }
  
  /// Visiting ``FallThroughStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FallThroughStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``FallThroughStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FallThroughStmtSyntax) {
  }
  
  /// Visiting ``FloatLiteralExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FloatLiteralExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``FloatLiteralExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FloatLiteralExprSyntax) {
  }
  
  /// Visiting ``ForStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ForStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ForStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ForStmtSyntax) {
  }
  
  /// Visiting ``ForceUnwrapExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ForceUnwrapExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ForceUnwrapExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ForceUnwrapExprSyntax) {
  }
  
  /// Visiting ``FunctionCallExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionCallExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``FunctionCallExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionCallExprSyntax) {
  }
  
  /// Visiting ``FunctionDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``FunctionDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionDeclSyntax) {
  }
  
  /// Visiting ``FunctionEffectSpecifiersSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionEffectSpecifiersSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``FunctionEffectSpecifiersSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionEffectSpecifiersSyntax) {
  }
  
  /// Visiting ``FunctionParameterClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionParameterClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``FunctionParameterClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionParameterClauseSyntax) {
  }
  
  /// Visiting ``FunctionParameterListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionParameterListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``FunctionParameterListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionParameterListSyntax) {
  }
  
  /// Visiting ``FunctionParameterSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionParameterSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``FunctionParameterSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionParameterSyntax) {
  }
  
  /// Visiting ``FunctionSignatureSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionSignatureSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``FunctionSignatureSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionSignatureSyntax) {
  }
  
  /// Visiting ``FunctionTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``FunctionTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionTypeSyntax) {
  }
  
  /// Visiting ``GenericArgumentClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericArgumentClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``GenericArgumentClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericArgumentClauseSyntax) {
  }
  
  /// Visiting ``GenericArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericArgumentListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``GenericArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericArgumentListSyntax) {
  }
  
  /// Visiting ``GenericArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericArgumentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``GenericArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericArgumentSyntax) {
  }
  
  /// Visiting ``GenericParameterClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericParameterClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``GenericParameterClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericParameterClauseSyntax) {
  }
  
  /// Visiting ``GenericParameterListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericParameterListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``GenericParameterListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericParameterListSyntax) {
  }
  
  /// Visiting ``GenericParameterSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericParameterSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``GenericParameterSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericParameterSyntax) {
  }
  
  /// Visiting ``GenericRequirementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericRequirementListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``GenericRequirementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericRequirementListSyntax) {
  }
  
  /// Visiting ``GenericRequirementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericRequirementSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``GenericRequirementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericRequirementSyntax) {
  }
  
  /// Visiting ``GenericSpecializationExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericSpecializationExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``GenericSpecializationExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericSpecializationExprSyntax) {
  }
  
  /// Visiting ``GenericWhereClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericWhereClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``GenericWhereClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericWhereClauseSyntax) {
  }
  
  /// Visiting ``GuardStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GuardStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``GuardStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GuardStmtSyntax) {
  }
  
  /// Visiting ``IdentifierExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IdentifierExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``IdentifierExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IdentifierExprSyntax) {
  }
  
  /// Visiting ``IdentifierPatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IdentifierPatternSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``IdentifierPatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IdentifierPatternSyntax) {
  }
  
  /// Visiting ``IdentifierTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IdentifierTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``IdentifierTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IdentifierTypeSyntax) {
  }
  
  /// Visiting ``IfConfigClauseListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IfConfigClauseListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``IfConfigClauseListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IfConfigClauseListSyntax) {
  }
  
  /// Visiting ``IfConfigClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IfConfigClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``IfConfigClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IfConfigClauseSyntax) {
  }
  
  /// Visiting ``IfConfigDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IfConfigDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``IfConfigDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IfConfigDeclSyntax) {
  }
  
  /// Visiting ``IfExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IfExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``IfExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IfExprSyntax) {
  }
  
  /// Visiting ``ImplementsAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ImplementsAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ImplementsAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ImplementsAttributeArgumentsSyntax) {
  }
  
  /// Visiting ``ImplicitlyUnwrappedOptionalTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ImplicitlyUnwrappedOptionalTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ImplicitlyUnwrappedOptionalTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ImplicitlyUnwrappedOptionalTypeSyntax) {
  }
  
  /// Visiting ``ImportDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ImportDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ImportDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ImportDeclSyntax) {
  }
  
  /// Visiting ``ImportPathComponentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ImportPathComponentListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ImportPathComponentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ImportPathComponentListSyntax) {
  }
  
  /// Visiting ``ImportPathComponentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ImportPathComponentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ImportPathComponentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ImportPathComponentSyntax) {
  }
  
  /// Visiting ``InOutExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InOutExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``InOutExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InOutExprSyntax) {
  }
  
  /// Visiting ``InfixOperatorExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InfixOperatorExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``InfixOperatorExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InfixOperatorExprSyntax) {
  }
  
  /// Visiting ``InheritanceClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InheritanceClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``InheritanceClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InheritanceClauseSyntax) {
  }
  
  /// Visiting ``InheritedTypeListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InheritedTypeListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``InheritedTypeListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InheritedTypeListSyntax) {
  }
  
  /// Visiting ``InheritedTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InheritedTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``InheritedTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InheritedTypeSyntax) {
  }
  
  /// Visiting ``InitializerClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InitializerClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``InitializerClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InitializerClauseSyntax) {
  }
  
  /// Visiting ``InitializerDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InitializerDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``InitializerDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InitializerDeclSyntax) {
  }
  
  /// Visiting ``IntegerLiteralExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IntegerLiteralExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``IntegerLiteralExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IntegerLiteralExprSyntax) {
  }
  
  /// Visiting ``IsExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IsExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``IsExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IsExprSyntax) {
  }
  
  /// Visiting ``IsTypePatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IsTypePatternSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``IsTypePatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IsTypePatternSyntax) {
  }
  
  /// Visiting ``KeyPathComponentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: KeyPathComponentListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``KeyPathComponentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: KeyPathComponentListSyntax) {
  }
  
  /// Visiting ``KeyPathComponentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: KeyPathComponentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``KeyPathComponentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: KeyPathComponentSyntax) {
  }
  
  /// Visiting ``KeyPathExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: KeyPathExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``KeyPathExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: KeyPathExprSyntax) {
  }
  
  /// Visiting ``KeyPathOptionalComponentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: KeyPathOptionalComponentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``KeyPathOptionalComponentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: KeyPathOptionalComponentSyntax) {
  }
  
  /// Visiting ``KeyPathPropertyComponentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: KeyPathPropertyComponentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``KeyPathPropertyComponentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: KeyPathPropertyComponentSyntax) {
  }
  
  /// Visiting ``KeyPathSubscriptComponentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: KeyPathSubscriptComponentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``KeyPathSubscriptComponentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: KeyPathSubscriptComponentSyntax) {
  }
  
  /// Visiting ``LabeledExprListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: LabeledExprListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``LabeledExprListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: LabeledExprListSyntax) {
  }
  
  /// Visiting ``LabeledExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: LabeledExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``LabeledExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: LabeledExprSyntax) {
  }
  
  /// Visiting ``LabeledSpecializeArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: LabeledSpecializeArgumentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``LabeledSpecializeArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: LabeledSpecializeArgumentSyntax) {
  }
  
  /// Visiting ``LabeledStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: LabeledStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``LabeledStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: LabeledStmtSyntax) {
  }
  
  /// Visiting ``LayoutRequirementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: LayoutRequirementSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``LayoutRequirementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: LayoutRequirementSyntax) {
  }
  
  /// Visiting ``MacroDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MacroDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MacroDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MacroDeclSyntax) {
  }
  
  /// Visiting ``MacroExpansionDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MacroExpansionDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MacroExpansionDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MacroExpansionDeclSyntax) {
  }
  
  /// Visiting ``MacroExpansionExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MacroExpansionExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MacroExpansionExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MacroExpansionExprSyntax) {
  }
  
  /// Visiting ``MatchingPatternConditionSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MatchingPatternConditionSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MatchingPatternConditionSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MatchingPatternConditionSyntax) {
  }
  
  /// Visiting ``MemberAccessExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MemberAccessExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MemberAccessExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MemberAccessExprSyntax) {
  }
  
  /// Visiting ``MemberBlockItemListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MemberBlockItemListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MemberBlockItemListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MemberBlockItemListSyntax) {
  }
  
  /// Visiting ``MemberBlockItemSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MemberBlockItemSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MemberBlockItemSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MemberBlockItemSyntax) {
  }
  
  /// Visiting ``MemberBlockSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MemberBlockSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MemberBlockSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MemberBlockSyntax) {
  }
  
  /// Visiting ``MemberTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MemberTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MemberTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MemberTypeSyntax) {
  }
  
  /// Visiting ``MetatypeTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MetatypeTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MetatypeTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MetatypeTypeSyntax) {
  }
  
  /// Visiting ``MissingDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MissingDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MissingDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MissingDeclSyntax) {
  }
  
  /// Visiting ``MissingExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MissingExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MissingExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MissingExprSyntax) {
  }
  
  /// Visiting ``MissingPatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MissingPatternSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MissingPatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MissingPatternSyntax) {
  }
  
  /// Visiting ``MissingStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MissingStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MissingStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MissingStmtSyntax) {
  }
  
  /// Visiting ``MissingSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MissingSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MissingSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MissingSyntax) {
  }
  
  /// Visiting ``MissingTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MissingTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MissingTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MissingTypeSyntax) {
  }
  
  /// Visiting ``MultipleTrailingClosureElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MultipleTrailingClosureElementListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MultipleTrailingClosureElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MultipleTrailingClosureElementListSyntax) {
  }
  
  /// Visiting ``MultipleTrailingClosureElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MultipleTrailingClosureElementSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``MultipleTrailingClosureElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MultipleTrailingClosureElementSyntax) {
  }
  
  /// Visiting ``NamedOpaqueReturnTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: NamedOpaqueReturnTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``NamedOpaqueReturnTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: NamedOpaqueReturnTypeSyntax) {
  }
  
  /// Visiting ``NilLiteralExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: NilLiteralExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``NilLiteralExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: NilLiteralExprSyntax) {
  }
  
  /// Visiting ``ObjCSelectorPieceListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ObjCSelectorPieceListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ObjCSelectorPieceListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ObjCSelectorPieceListSyntax) {
  }
  
  /// Visiting ``ObjCSelectorPieceSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ObjCSelectorPieceSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ObjCSelectorPieceSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ObjCSelectorPieceSyntax) {
  }
  
  /// Visiting ``OpaqueReturnTypeOfAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: OpaqueReturnTypeOfAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``OpaqueReturnTypeOfAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: OpaqueReturnTypeOfAttributeArgumentsSyntax) {
  }
  
  /// Visiting ``OperatorDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: OperatorDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``OperatorDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: OperatorDeclSyntax) {
  }
  
  /// Visiting ``OperatorPrecedenceAndTypesSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: OperatorPrecedenceAndTypesSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``OperatorPrecedenceAndTypesSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: OperatorPrecedenceAndTypesSyntax) {
  }
  
  /// Visiting ``OptionalBindingConditionSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: OptionalBindingConditionSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``OptionalBindingConditionSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: OptionalBindingConditionSyntax) {
  }
  
  /// Visiting ``OptionalChainingExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: OptionalChainingExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``OptionalChainingExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: OptionalChainingExprSyntax) {
  }
  
  /// Visiting ``OptionalTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: OptionalTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``OptionalTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: OptionalTypeSyntax) {
  }
  
  /// Visiting ``OriginallyDefinedInAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: OriginallyDefinedInAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``OriginallyDefinedInAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: OriginallyDefinedInAttributeArgumentsSyntax) {
  }
  
  /// Visiting ``PackElementExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PackElementExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PackElementExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PackElementExprSyntax) {
  }
  
  /// Visiting ``PackElementTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PackElementTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PackElementTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PackElementTypeSyntax) {
  }
  
  /// Visiting ``PackExpansionExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PackExpansionExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PackExpansionExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PackExpansionExprSyntax) {
  }
  
  /// Visiting ``PackExpansionTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PackExpansionTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PackExpansionTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PackExpansionTypeSyntax) {
  }
  
  /// Visiting ``PatternBindingListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PatternBindingListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PatternBindingListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PatternBindingListSyntax) {
  }
  
  /// Visiting ``PatternBindingSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PatternBindingSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PatternBindingSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PatternBindingSyntax) {
  }
  
  /// Visiting ``PatternExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PatternExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PatternExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PatternExprSyntax) {
  }
  
  /// Visiting ``PlatformVersionItemListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PlatformVersionItemListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PlatformVersionItemListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PlatformVersionItemListSyntax) {
  }
  
  /// Visiting ``PlatformVersionItemSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PlatformVersionItemSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PlatformVersionItemSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PlatformVersionItemSyntax) {
  }
  
  /// Visiting ``PlatformVersionSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PlatformVersionSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PlatformVersionSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PlatformVersionSyntax) {
  }
  
  /// Visiting ``PostfixIfConfigExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PostfixIfConfigExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PostfixIfConfigExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PostfixIfConfigExprSyntax) {
  }
  
  /// Visiting ``PostfixOperatorExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PostfixOperatorExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PostfixOperatorExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PostfixOperatorExprSyntax) {
  }
  
  /// Visiting ``PoundSourceLocationArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PoundSourceLocationArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PoundSourceLocationArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PoundSourceLocationArgumentsSyntax) {
  }
  
  /// Visiting ``PoundSourceLocationSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PoundSourceLocationSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PoundSourceLocationSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PoundSourceLocationSyntax) {
  }
  
  /// Visiting ``PrecedenceGroupAssignmentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupAssignmentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PrecedenceGroupAssignmentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupAssignmentSyntax) {
  }
  
  /// Visiting ``PrecedenceGroupAssociativitySyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupAssociativitySyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PrecedenceGroupAssociativitySyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupAssociativitySyntax) {
  }
  
  /// Visiting ``PrecedenceGroupAttributeListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupAttributeListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PrecedenceGroupAttributeListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupAttributeListSyntax) {
  }
  
  /// Visiting ``PrecedenceGroupDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PrecedenceGroupDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupDeclSyntax) {
  }
  
  /// Visiting ``PrecedenceGroupNameListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupNameListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PrecedenceGroupNameListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupNameListSyntax) {
  }
  
  /// Visiting ``PrecedenceGroupNameSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupNameSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PrecedenceGroupNameSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupNameSyntax) {
  }
  
  /// Visiting ``PrecedenceGroupRelationSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupRelationSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PrecedenceGroupRelationSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupRelationSyntax) {
  }
  
  /// Visiting ``PrefixOperatorExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrefixOperatorExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PrefixOperatorExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrefixOperatorExprSyntax) {
  }
  
  /// Visiting ``PrimaryAssociatedTypeClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrimaryAssociatedTypeClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PrimaryAssociatedTypeClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrimaryAssociatedTypeClauseSyntax) {
  }
  
  /// Visiting ``PrimaryAssociatedTypeListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrimaryAssociatedTypeListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PrimaryAssociatedTypeListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrimaryAssociatedTypeListSyntax) {
  }
  
  /// Visiting ``PrimaryAssociatedTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrimaryAssociatedTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``PrimaryAssociatedTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrimaryAssociatedTypeSyntax) {
  }
  
  /// Visiting ``ProtocolDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ProtocolDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ProtocolDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ProtocolDeclSyntax) {
  }
  
  /// Visiting ``QualifiedDeclNameSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: QualifiedDeclNameSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``QualifiedDeclNameSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: QualifiedDeclNameSyntax) {
  }
  
  /// Visiting ``RegexLiteralExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: RegexLiteralExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``RegexLiteralExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: RegexLiteralExprSyntax) {
  }
  
  /// Visiting ``RepeatStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: RepeatStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``RepeatStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: RepeatStmtSyntax) {
  }
  
  /// Visiting ``ReturnClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ReturnClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ReturnClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ReturnClauseSyntax) {
  }
  
  /// Visiting ``ReturnStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ReturnStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ReturnStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ReturnStmtSyntax) {
  }
  
  /// Visiting ``SameTypeRequirementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SameTypeRequirementSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SameTypeRequirementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SameTypeRequirementSyntax) {
  }
  
  /// Visiting ``SequenceExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SequenceExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SequenceExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SequenceExprSyntax) {
  }
  
  /// Visiting ``SomeOrAnyTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SomeOrAnyTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SomeOrAnyTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SomeOrAnyTypeSyntax) {
  }
  
  /// Visiting ``SourceFileSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SourceFileSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SourceFileSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SourceFileSyntax) {
  }
  
  /// Visiting ``SpecializeAttributeArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SpecializeAttributeArgumentListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SpecializeAttributeArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SpecializeAttributeArgumentListSyntax) {
  }
  
  /// Visiting ``SpecializeAvailabilityArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SpecializeAvailabilityArgumentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SpecializeAvailabilityArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SpecializeAvailabilityArgumentSyntax) {
  }
  
  /// Visiting ``SpecializeTargetFunctionArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SpecializeTargetFunctionArgumentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SpecializeTargetFunctionArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SpecializeTargetFunctionArgumentSyntax) {
  }
  
  /// Visiting ``StringLiteralExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: StringLiteralExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``StringLiteralExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: StringLiteralExprSyntax) {
  }
  
  /// Visiting ``StringLiteralSegmentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: StringLiteralSegmentListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``StringLiteralSegmentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: StringLiteralSegmentListSyntax) {
  }
  
  /// Visiting ``StringSegmentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: StringSegmentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``StringSegmentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: StringSegmentSyntax) {
  }
  
  /// Visiting ``StructDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: StructDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``StructDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: StructDeclSyntax) {
  }
  
  /// Visiting ``SubscriptCallExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SubscriptCallExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SubscriptCallExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SubscriptCallExprSyntax) {
  }
  
  /// Visiting ``SubscriptDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SubscriptDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SubscriptDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SubscriptDeclSyntax) {
  }
  
  /// Visiting ``SuperExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SuperExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SuperExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SuperExprSyntax) {
  }
  
  /// Visiting ``SuppressedTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SuppressedTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SuppressedTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SuppressedTypeSyntax) {
  }
  
  /// Visiting ``SwitchCaseItemListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchCaseItemListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SwitchCaseItemListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchCaseItemListSyntax) {
  }
  
  /// Visiting ``SwitchCaseItemSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchCaseItemSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SwitchCaseItemSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchCaseItemSyntax) {
  }
  
  /// Visiting ``SwitchCaseLabelSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchCaseLabelSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SwitchCaseLabelSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchCaseLabelSyntax) {
  }
  
  /// Visiting ``SwitchCaseListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchCaseListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SwitchCaseListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchCaseListSyntax) {
  }
  
  /// Visiting ``SwitchCaseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchCaseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SwitchCaseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchCaseSyntax) {
  }
  
  /// Visiting ``SwitchDefaultLabelSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchDefaultLabelSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SwitchDefaultLabelSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchDefaultLabelSyntax) {
  }
  
  /// Visiting ``SwitchExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``SwitchExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchExprSyntax) {
  }
  
  /// Visiting ``TernaryExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TernaryExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TernaryExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TernaryExprSyntax) {
  }
  
  /// Visiting ``ThrowStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ThrowStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ThrowStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ThrowStmtSyntax) {
  }
  
  /// Visiting ``TryExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TryExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TryExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TryExprSyntax) {
  }
  
  /// Visiting ``TupleExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TupleExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TupleExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TupleExprSyntax) {
  }
  
  /// Visiting ``TuplePatternElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TuplePatternElementListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TuplePatternElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TuplePatternElementListSyntax) {
  }
  
  /// Visiting ``TuplePatternElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TuplePatternElementSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TuplePatternElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TuplePatternElementSyntax) {
  }
  
  /// Visiting ``TuplePatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TuplePatternSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TuplePatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TuplePatternSyntax) {
  }
  
  /// Visiting ``TupleTypeElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TupleTypeElementListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TupleTypeElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TupleTypeElementListSyntax) {
  }
  
  /// Visiting ``TupleTypeElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TupleTypeElementSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TupleTypeElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TupleTypeElementSyntax) {
  }
  
  /// Visiting ``TupleTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TupleTypeSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TupleTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TupleTypeSyntax) {
  }
  
  /// Visiting ``TypeAliasDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TypeAliasDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TypeAliasDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TypeAliasDeclSyntax) {
  }
  
  /// Visiting ``TypeAnnotationSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TypeAnnotationSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TypeAnnotationSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TypeAnnotationSyntax) {
  }
  
  /// Visiting ``TypeEffectSpecifiersSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TypeEffectSpecifiersSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TypeEffectSpecifiersSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TypeEffectSpecifiersSyntax) {
  }
  
  /// Visiting ``TypeExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TypeExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TypeExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TypeExprSyntax) {
  }
  
  /// Visiting ``TypeInitializerClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TypeInitializerClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``TypeInitializerClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TypeInitializerClauseSyntax) {
  }
  
  /// Visiting ``UnavailableFromAsyncAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: UnavailableFromAsyncAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``UnavailableFromAsyncAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: UnavailableFromAsyncAttributeArgumentsSyntax) {
  }
  
  /// Visiting ``UnderscorePrivateAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: UnderscorePrivateAttributeArgumentsSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``UnderscorePrivateAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: UnderscorePrivateAttributeArgumentsSyntax) {
  }
  
  /// Visiting ``UnexpectedNodesSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: UnexpectedNodesSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``UnexpectedNodesSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: UnexpectedNodesSyntax) {
  }
  
  /// Visiting ``UnresolvedAsExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: UnresolvedAsExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``UnresolvedAsExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: UnresolvedAsExprSyntax) {
  }
  
  /// Visiting ``UnresolvedIsExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: UnresolvedIsExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``UnresolvedIsExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: UnresolvedIsExprSyntax) {
  }
  
  /// Visiting ``UnresolvedTernaryExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: UnresolvedTernaryExprSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``UnresolvedTernaryExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: UnresolvedTernaryExprSyntax) {
  }
  
  /// Visiting ``ValueBindingPatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ValueBindingPatternSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``ValueBindingPatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ValueBindingPatternSyntax) {
  }
  
  /// Visiting ``VariableDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: VariableDeclSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``VariableDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: VariableDeclSyntax) {
  }
  
  /// Visiting ``VersionComponentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: VersionComponentListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``VersionComponentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: VersionComponentListSyntax) {
  }
  
  /// Visiting ``VersionComponentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: VersionComponentSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``VersionComponentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: VersionComponentSyntax) {
  }
  
  /// Visiting ``VersionTupleSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: VersionTupleSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``VersionTupleSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: VersionTupleSyntax) {
  }
  
  /// Visiting ``WhereClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: WhereClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``WhereClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: WhereClauseSyntax) {
  }
  
  /// Visiting ``WhileStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: WhileStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``WhileStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: WhileStmtSyntax) {
  }
  
  /// Visiting ``WildcardPatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: WildcardPatternSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``WildcardPatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: WildcardPatternSyntax) {
  }
  
  /// Visiting ``YieldStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: YieldStmtSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``YieldStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: YieldStmtSyntax) {
  }
  
  /// Visiting ``YieldedExpressionListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: YieldedExpressionListSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``YieldedExpressionListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: YieldedExpressionListSyntax) {
  }
  
  /// Visiting ``YieldedExpressionSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: YieldedExpressionSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``YieldedExpressionSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: YieldedExpressionSyntax) {
  }
  
  /// Visiting ``YieldedExpressionsClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: YieldedExpressionsClauseSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting ``YieldedExpressionsClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: YieldedExpressionsClauseSyntax) {
  }
  
  /// Visiting ``TokenSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }
  
  /// The function called after visiting the node and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TokenSyntax) {
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAccessorBlockSyntax(_ data: SyntaxData) {
    let node = AccessorBlockSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAccessorDeclListSyntax(_ data: SyntaxData) {
    let node = AccessorDeclListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAccessorDeclSyntax(_ data: SyntaxData) {
    let node = AccessorDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAccessorEffectSpecifiersSyntax(_ data: SyntaxData) {
    let node = AccessorEffectSpecifiersSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAccessorParametersSyntax(_ data: SyntaxData) {
    let node = AccessorParametersSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplActorDeclSyntax(_ data: SyntaxData) {
    let node = ActorDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplArrayElementListSyntax(_ data: SyntaxData) {
    let node = ArrayElementListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplArrayElementSyntax(_ data: SyntaxData) {
    let node = ArrayElementSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplArrayExprSyntax(_ data: SyntaxData) {
    let node = ArrayExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplArrayTypeSyntax(_ data: SyntaxData) {
    let node = ArrayTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplArrowExprSyntax(_ data: SyntaxData) {
    let node = ArrowExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAsExprSyntax(_ data: SyntaxData) {
    let node = AsExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAssignmentExprSyntax(_ data: SyntaxData) {
    let node = AssignmentExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAssociatedTypeDeclSyntax(_ data: SyntaxData) {
    let node = AssociatedTypeDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAttributeListSyntax(_ data: SyntaxData) {
    let node = AttributeListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAttributeSyntax(_ data: SyntaxData) {
    let node = AttributeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAttributedTypeSyntax(_ data: SyntaxData) {
    let node = AttributedTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAvailabilityArgumentListSyntax(_ data: SyntaxData) {
    let node = AvailabilityArgumentListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAvailabilityArgumentSyntax(_ data: SyntaxData) {
    let node = AvailabilityArgumentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAvailabilityConditionSyntax(_ data: SyntaxData) {
    let node = AvailabilityConditionSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAvailabilityLabeledArgumentSyntax(_ data: SyntaxData) {
    let node = AvailabilityLabeledArgumentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplAwaitExprSyntax(_ data: SyntaxData) {
    let node = AwaitExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplBackDeployedAttributeArgumentsSyntax(_ data: SyntaxData) {
    let node = BackDeployedAttributeArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplBinaryOperatorExprSyntax(_ data: SyntaxData) {
    let node = BinaryOperatorExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplBooleanLiteralExprSyntax(_ data: SyntaxData) {
    let node = BooleanLiteralExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplBorrowExprSyntax(_ data: SyntaxData) {
    let node = BorrowExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplBreakStmtSyntax(_ data: SyntaxData) {
    let node = BreakStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplCanImportExprSyntax(_ data: SyntaxData) {
    let node = CanImportExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplCanImportVersionInfoSyntax(_ data: SyntaxData) {
    let node = CanImportVersionInfoSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplCatchClauseListSyntax(_ data: SyntaxData) {
    let node = CatchClauseListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplCatchClauseSyntax(_ data: SyntaxData) {
    let node = CatchClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplCatchItemListSyntax(_ data: SyntaxData) {
    let node = CatchItemListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplCatchItemSyntax(_ data: SyntaxData) {
    let node = CatchItemSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplClassDeclSyntax(_ data: SyntaxData) {
    let node = ClassDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplClassRestrictionTypeSyntax(_ data: SyntaxData) {
    let node = ClassRestrictionTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplClosureCaptureClauseSyntax(_ data: SyntaxData) {
    let node = ClosureCaptureClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplClosureCaptureListSyntax(_ data: SyntaxData) {
    let node = ClosureCaptureListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplClosureCaptureSpecifierSyntax(_ data: SyntaxData) {
    let node = ClosureCaptureSpecifierSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplClosureCaptureSyntax(_ data: SyntaxData) {
    let node = ClosureCaptureSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplClosureExprSyntax(_ data: SyntaxData) {
    let node = ClosureExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplClosureParameterClauseSyntax(_ data: SyntaxData) {
    let node = ClosureParameterClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplClosureParameterListSyntax(_ data: SyntaxData) {
    let node = ClosureParameterListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplClosureParameterSyntax(_ data: SyntaxData) {
    let node = ClosureParameterSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplClosureShorthandParameterListSyntax(_ data: SyntaxData) {
    let node = ClosureShorthandParameterListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplClosureShorthandParameterSyntax(_ data: SyntaxData) {
    let node = ClosureShorthandParameterSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplClosureSignatureSyntax(_ data: SyntaxData) {
    let node = ClosureSignatureSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplCodeBlockItemListSyntax(_ data: SyntaxData) {
    let node = CodeBlockItemListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplCodeBlockItemSyntax(_ data: SyntaxData) {
    let node = CodeBlockItemSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplCodeBlockSyntax(_ data: SyntaxData) {
    let node = CodeBlockSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplCompositionTypeElementListSyntax(_ data: SyntaxData) {
    let node = CompositionTypeElementListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplCompositionTypeElementSyntax(_ data: SyntaxData) {
    let node = CompositionTypeElementSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplCompositionTypeSyntax(_ data: SyntaxData) {
    let node = CompositionTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplConditionElementListSyntax(_ data: SyntaxData) {
    let node = ConditionElementListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplConditionElementSyntax(_ data: SyntaxData) {
    let node = ConditionElementSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplConformanceRequirementSyntax(_ data: SyntaxData) {
    let node = ConformanceRequirementSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplConsumeExprSyntax(_ data: SyntaxData) {
    let node = ConsumeExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplContinueStmtSyntax(_ data: SyntaxData) {
    let node = ContinueStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplConventionAttributeArgumentsSyntax(_ data: SyntaxData) {
    let node = ConventionAttributeArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplConventionWitnessMethodAttributeArgumentsSyntax(_ data: SyntaxData) {
    let node = ConventionWitnessMethodAttributeArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplCopyExprSyntax(_ data: SyntaxData) {
    let node = CopyExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDeclModifierDetailSyntax(_ data: SyntaxData) {
    let node = DeclModifierDetailSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDeclModifierListSyntax(_ data: SyntaxData) {
    let node = DeclModifierListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDeclModifierSyntax(_ data: SyntaxData) {
    let node = DeclModifierSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDeclNameArgumentListSyntax(_ data: SyntaxData) {
    let node = DeclNameArgumentListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDeclNameArgumentSyntax(_ data: SyntaxData) {
    let node = DeclNameArgumentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDeclNameArgumentsSyntax(_ data: SyntaxData) {
    let node = DeclNameArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDeclNameSyntax(_ data: SyntaxData) {
    let node = DeclNameSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDeferStmtSyntax(_ data: SyntaxData) {
    let node = DeferStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDeinitializerDeclSyntax(_ data: SyntaxData) {
    let node = DeinitializerDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDeinitializerEffectSpecifiersSyntax(_ data: SyntaxData) {
    let node = DeinitializerEffectSpecifiersSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDerivativeAttributeArgumentsSyntax(_ data: SyntaxData) {
    let node = DerivativeAttributeArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDesignatedTypeListSyntax(_ data: SyntaxData) {
    let node = DesignatedTypeListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDesignatedTypeSyntax(_ data: SyntaxData) {
    let node = DesignatedTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDictionaryElementListSyntax(_ data: SyntaxData) {
    let node = DictionaryElementListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDictionaryElementSyntax(_ data: SyntaxData) {
    let node = DictionaryElementSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDictionaryExprSyntax(_ data: SyntaxData) {
    let node = DictionaryExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDictionaryTypeSyntax(_ data: SyntaxData) {
    let node = DictionaryTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDifferentiabilityArgumentListSyntax(_ data: SyntaxData) {
    let node = DifferentiabilityArgumentListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDifferentiabilityArgumentSyntax(_ data: SyntaxData) {
    let node = DifferentiabilityArgumentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDifferentiabilityArgumentsSyntax(_ data: SyntaxData) {
    let node = DifferentiabilityArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDifferentiabilityWithRespectToArgumentSyntax(_ data: SyntaxData) {
    let node = DifferentiabilityWithRespectToArgumentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDifferentiableAttributeArgumentsSyntax(_ data: SyntaxData) {
    let node = DifferentiableAttributeArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDiscardAssignmentExprSyntax(_ data: SyntaxData) {
    let node = DiscardAssignmentExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDiscardStmtSyntax(_ data: SyntaxData) {
    let node = DiscardStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDoStmtSyntax(_ data: SyntaxData) {
    let node = DoStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDocumentationAttributeArgumentListSyntax(_ data: SyntaxData) {
    let node = DocumentationAttributeArgumentListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDocumentationAttributeArgumentSyntax(_ data: SyntaxData) {
    let node = DocumentationAttributeArgumentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplDynamicReplacementAttributeArgumentsSyntax(_ data: SyntaxData) {
    let node = DynamicReplacementAttributeArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplEditorPlaceholderDeclSyntax(_ data: SyntaxData) {
    let node = EditorPlaceholderDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplEditorPlaceholderExprSyntax(_ data: SyntaxData) {
    let node = EditorPlaceholderExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplEffectsAttributeArgumentListSyntax(_ data: SyntaxData) {
    let node = EffectsAttributeArgumentListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplEnumCaseDeclSyntax(_ data: SyntaxData) {
    let node = EnumCaseDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplEnumCaseElementListSyntax(_ data: SyntaxData) {
    let node = EnumCaseElementListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplEnumCaseElementSyntax(_ data: SyntaxData) {
    let node = EnumCaseElementSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplEnumCaseParameterClauseSyntax(_ data: SyntaxData) {
    let node = EnumCaseParameterClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplEnumCaseParameterListSyntax(_ data: SyntaxData) {
    let node = EnumCaseParameterListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplEnumCaseParameterSyntax(_ data: SyntaxData) {
    let node = EnumCaseParameterSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplEnumDeclSyntax(_ data: SyntaxData) {
    let node = EnumDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplExposeAttributeArgumentsSyntax(_ data: SyntaxData) {
    let node = ExposeAttributeArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplExprListSyntax(_ data: SyntaxData) {
    let node = ExprListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplExpressionPatternSyntax(_ data: SyntaxData) {
    let node = ExpressionPatternSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplExpressionSegmentSyntax(_ data: SyntaxData) {
    let node = ExpressionSegmentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplExpressionStmtSyntax(_ data: SyntaxData) {
    let node = ExpressionStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplExtensionDeclSyntax(_ data: SyntaxData) {
    let node = ExtensionDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplFallThroughStmtSyntax(_ data: SyntaxData) {
    let node = FallThroughStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplFloatLiteralExprSyntax(_ data: SyntaxData) {
    let node = FloatLiteralExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplForStmtSyntax(_ data: SyntaxData) {
    let node = ForStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplForceUnwrapExprSyntax(_ data: SyntaxData) {
    let node = ForceUnwrapExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplFunctionCallExprSyntax(_ data: SyntaxData) {
    let node = FunctionCallExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplFunctionDeclSyntax(_ data: SyntaxData) {
    let node = FunctionDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplFunctionEffectSpecifiersSyntax(_ data: SyntaxData) {
    let node = FunctionEffectSpecifiersSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplFunctionParameterClauseSyntax(_ data: SyntaxData) {
    let node = FunctionParameterClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplFunctionParameterListSyntax(_ data: SyntaxData) {
    let node = FunctionParameterListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplFunctionParameterSyntax(_ data: SyntaxData) {
    let node = FunctionParameterSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplFunctionSignatureSyntax(_ data: SyntaxData) {
    let node = FunctionSignatureSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplFunctionTypeSyntax(_ data: SyntaxData) {
    let node = FunctionTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplGenericArgumentClauseSyntax(_ data: SyntaxData) {
    let node = GenericArgumentClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplGenericArgumentListSyntax(_ data: SyntaxData) {
    let node = GenericArgumentListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplGenericArgumentSyntax(_ data: SyntaxData) {
    let node = GenericArgumentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplGenericParameterClauseSyntax(_ data: SyntaxData) {
    let node = GenericParameterClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplGenericParameterListSyntax(_ data: SyntaxData) {
    let node = GenericParameterListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplGenericParameterSyntax(_ data: SyntaxData) {
    let node = GenericParameterSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplGenericRequirementListSyntax(_ data: SyntaxData) {
    let node = GenericRequirementListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplGenericRequirementSyntax(_ data: SyntaxData) {
    let node = GenericRequirementSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplGenericSpecializationExprSyntax(_ data: SyntaxData) {
    let node = GenericSpecializationExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplGenericWhereClauseSyntax(_ data: SyntaxData) {
    let node = GenericWhereClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplGuardStmtSyntax(_ data: SyntaxData) {
    let node = GuardStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplIdentifierExprSyntax(_ data: SyntaxData) {
    let node = IdentifierExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplIdentifierPatternSyntax(_ data: SyntaxData) {
    let node = IdentifierPatternSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplIdentifierTypeSyntax(_ data: SyntaxData) {
    let node = IdentifierTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplIfConfigClauseListSyntax(_ data: SyntaxData) {
    let node = IfConfigClauseListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplIfConfigClauseSyntax(_ data: SyntaxData) {
    let node = IfConfigClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplIfConfigDeclSyntax(_ data: SyntaxData) {
    let node = IfConfigDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplIfExprSyntax(_ data: SyntaxData) {
    let node = IfExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplImplementsAttributeArgumentsSyntax(_ data: SyntaxData) {
    let node = ImplementsAttributeArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplImplicitlyUnwrappedOptionalTypeSyntax(_ data: SyntaxData) {
    let node = ImplicitlyUnwrappedOptionalTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplImportDeclSyntax(_ data: SyntaxData) {
    let node = ImportDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplImportPathComponentListSyntax(_ data: SyntaxData) {
    let node = ImportPathComponentListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplImportPathComponentSyntax(_ data: SyntaxData) {
    let node = ImportPathComponentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplInOutExprSyntax(_ data: SyntaxData) {
    let node = InOutExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplInfixOperatorExprSyntax(_ data: SyntaxData) {
    let node = InfixOperatorExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplInheritanceClauseSyntax(_ data: SyntaxData) {
    let node = InheritanceClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplInheritedTypeListSyntax(_ data: SyntaxData) {
    let node = InheritedTypeListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplInheritedTypeSyntax(_ data: SyntaxData) {
    let node = InheritedTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplInitializerClauseSyntax(_ data: SyntaxData) {
    let node = InitializerClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplInitializerDeclSyntax(_ data: SyntaxData) {
    let node = InitializerDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplIntegerLiteralExprSyntax(_ data: SyntaxData) {
    let node = IntegerLiteralExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplIsExprSyntax(_ data: SyntaxData) {
    let node = IsExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplIsTypePatternSyntax(_ data: SyntaxData) {
    let node = IsTypePatternSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplKeyPathComponentListSyntax(_ data: SyntaxData) {
    let node = KeyPathComponentListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplKeyPathComponentSyntax(_ data: SyntaxData) {
    let node = KeyPathComponentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplKeyPathExprSyntax(_ data: SyntaxData) {
    let node = KeyPathExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplKeyPathOptionalComponentSyntax(_ data: SyntaxData) {
    let node = KeyPathOptionalComponentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplKeyPathPropertyComponentSyntax(_ data: SyntaxData) {
    let node = KeyPathPropertyComponentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplKeyPathSubscriptComponentSyntax(_ data: SyntaxData) {
    let node = KeyPathSubscriptComponentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplLabeledExprListSyntax(_ data: SyntaxData) {
    let node = LabeledExprListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplLabeledExprSyntax(_ data: SyntaxData) {
    let node = LabeledExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplLabeledSpecializeArgumentSyntax(_ data: SyntaxData) {
    let node = LabeledSpecializeArgumentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplLabeledStmtSyntax(_ data: SyntaxData) {
    let node = LabeledStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplLayoutRequirementSyntax(_ data: SyntaxData) {
    let node = LayoutRequirementSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMacroDeclSyntax(_ data: SyntaxData) {
    let node = MacroDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMacroExpansionDeclSyntax(_ data: SyntaxData) {
    let node = MacroExpansionDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMacroExpansionExprSyntax(_ data: SyntaxData) {
    let node = MacroExpansionExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMatchingPatternConditionSyntax(_ data: SyntaxData) {
    let node = MatchingPatternConditionSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMemberAccessExprSyntax(_ data: SyntaxData) {
    let node = MemberAccessExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMemberBlockItemListSyntax(_ data: SyntaxData) {
    let node = MemberBlockItemListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMemberBlockItemSyntax(_ data: SyntaxData) {
    let node = MemberBlockItemSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMemberBlockSyntax(_ data: SyntaxData) {
    let node = MemberBlockSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMemberTypeSyntax(_ data: SyntaxData) {
    let node = MemberTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMetatypeTypeSyntax(_ data: SyntaxData) {
    let node = MetatypeTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMissingDeclSyntax(_ data: SyntaxData) {
    let node = MissingDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMissingExprSyntax(_ data: SyntaxData) {
    let node = MissingExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMissingPatternSyntax(_ data: SyntaxData) {
    let node = MissingPatternSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMissingStmtSyntax(_ data: SyntaxData) {
    let node = MissingStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMissingSyntax(_ data: SyntaxData) {
    let node = MissingSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMissingTypeSyntax(_ data: SyntaxData) {
    let node = MissingTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMultipleTrailingClosureElementListSyntax(_ data: SyntaxData) {
    let node = MultipleTrailingClosureElementListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplMultipleTrailingClosureElementSyntax(_ data: SyntaxData) {
    let node = MultipleTrailingClosureElementSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplNamedOpaqueReturnTypeSyntax(_ data: SyntaxData) {
    let node = NamedOpaqueReturnTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplNilLiteralExprSyntax(_ data: SyntaxData) {
    let node = NilLiteralExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplObjCSelectorPieceListSyntax(_ data: SyntaxData) {
    let node = ObjCSelectorPieceListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplObjCSelectorPieceSyntax(_ data: SyntaxData) {
    let node = ObjCSelectorPieceSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplOpaqueReturnTypeOfAttributeArgumentsSyntax(_ data: SyntaxData) {
    let node = OpaqueReturnTypeOfAttributeArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplOperatorDeclSyntax(_ data: SyntaxData) {
    let node = OperatorDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplOperatorPrecedenceAndTypesSyntax(_ data: SyntaxData) {
    let node = OperatorPrecedenceAndTypesSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplOptionalBindingConditionSyntax(_ data: SyntaxData) {
    let node = OptionalBindingConditionSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplOptionalChainingExprSyntax(_ data: SyntaxData) {
    let node = OptionalChainingExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplOptionalTypeSyntax(_ data: SyntaxData) {
    let node = OptionalTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplOriginallyDefinedInAttributeArgumentsSyntax(_ data: SyntaxData) {
    let node = OriginallyDefinedInAttributeArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPackElementExprSyntax(_ data: SyntaxData) {
    let node = PackElementExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPackElementTypeSyntax(_ data: SyntaxData) {
    let node = PackElementTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPackExpansionExprSyntax(_ data: SyntaxData) {
    let node = PackExpansionExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPackExpansionTypeSyntax(_ data: SyntaxData) {
    let node = PackExpansionTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPatternBindingListSyntax(_ data: SyntaxData) {
    let node = PatternBindingListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPatternBindingSyntax(_ data: SyntaxData) {
    let node = PatternBindingSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPatternExprSyntax(_ data: SyntaxData) {
    let node = PatternExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPlatformVersionItemListSyntax(_ data: SyntaxData) {
    let node = PlatformVersionItemListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPlatformVersionItemSyntax(_ data: SyntaxData) {
    let node = PlatformVersionItemSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPlatformVersionSyntax(_ data: SyntaxData) {
    let node = PlatformVersionSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPostfixIfConfigExprSyntax(_ data: SyntaxData) {
    let node = PostfixIfConfigExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPostfixOperatorExprSyntax(_ data: SyntaxData) {
    let node = PostfixOperatorExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPoundSourceLocationArgumentsSyntax(_ data: SyntaxData) {
    let node = PoundSourceLocationArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPoundSourceLocationSyntax(_ data: SyntaxData) {
    let node = PoundSourceLocationSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPrecedenceGroupAssignmentSyntax(_ data: SyntaxData) {
    let node = PrecedenceGroupAssignmentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPrecedenceGroupAssociativitySyntax(_ data: SyntaxData) {
    let node = PrecedenceGroupAssociativitySyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPrecedenceGroupAttributeListSyntax(_ data: SyntaxData) {
    let node = PrecedenceGroupAttributeListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPrecedenceGroupDeclSyntax(_ data: SyntaxData) {
    let node = PrecedenceGroupDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPrecedenceGroupNameListSyntax(_ data: SyntaxData) {
    let node = PrecedenceGroupNameListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPrecedenceGroupNameSyntax(_ data: SyntaxData) {
    let node = PrecedenceGroupNameSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPrecedenceGroupRelationSyntax(_ data: SyntaxData) {
    let node = PrecedenceGroupRelationSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPrefixOperatorExprSyntax(_ data: SyntaxData) {
    let node = PrefixOperatorExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPrimaryAssociatedTypeClauseSyntax(_ data: SyntaxData) {
    let node = PrimaryAssociatedTypeClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPrimaryAssociatedTypeListSyntax(_ data: SyntaxData) {
    let node = PrimaryAssociatedTypeListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplPrimaryAssociatedTypeSyntax(_ data: SyntaxData) {
    let node = PrimaryAssociatedTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplProtocolDeclSyntax(_ data: SyntaxData) {
    let node = ProtocolDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplQualifiedDeclNameSyntax(_ data: SyntaxData) {
    let node = QualifiedDeclNameSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplRegexLiteralExprSyntax(_ data: SyntaxData) {
    let node = RegexLiteralExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplRepeatStmtSyntax(_ data: SyntaxData) {
    let node = RepeatStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplReturnClauseSyntax(_ data: SyntaxData) {
    let node = ReturnClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplReturnStmtSyntax(_ data: SyntaxData) {
    let node = ReturnStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSameTypeRequirementSyntax(_ data: SyntaxData) {
    let node = SameTypeRequirementSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSequenceExprSyntax(_ data: SyntaxData) {
    let node = SequenceExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSomeOrAnyTypeSyntax(_ data: SyntaxData) {
    let node = SomeOrAnyTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSourceFileSyntax(_ data: SyntaxData) {
    let node = SourceFileSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSpecializeAttributeArgumentListSyntax(_ data: SyntaxData) {
    let node = SpecializeAttributeArgumentListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSpecializeAvailabilityArgumentSyntax(_ data: SyntaxData) {
    let node = SpecializeAvailabilityArgumentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSpecializeTargetFunctionArgumentSyntax(_ data: SyntaxData) {
    let node = SpecializeTargetFunctionArgumentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplStringLiteralExprSyntax(_ data: SyntaxData) {
    let node = StringLiteralExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplStringLiteralSegmentListSyntax(_ data: SyntaxData) {
    let node = StringLiteralSegmentListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplStringSegmentSyntax(_ data: SyntaxData) {
    let node = StringSegmentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplStructDeclSyntax(_ data: SyntaxData) {
    let node = StructDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSubscriptCallExprSyntax(_ data: SyntaxData) {
    let node = SubscriptCallExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSubscriptDeclSyntax(_ data: SyntaxData) {
    let node = SubscriptDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSuperExprSyntax(_ data: SyntaxData) {
    let node = SuperExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSuppressedTypeSyntax(_ data: SyntaxData) {
    let node = SuppressedTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSwitchCaseItemListSyntax(_ data: SyntaxData) {
    let node = SwitchCaseItemListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSwitchCaseItemSyntax(_ data: SyntaxData) {
    let node = SwitchCaseItemSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSwitchCaseLabelSyntax(_ data: SyntaxData) {
    let node = SwitchCaseLabelSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSwitchCaseListSyntax(_ data: SyntaxData) {
    let node = SwitchCaseListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSwitchCaseSyntax(_ data: SyntaxData) {
    let node = SwitchCaseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSwitchDefaultLabelSyntax(_ data: SyntaxData) {
    let node = SwitchDefaultLabelSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplSwitchExprSyntax(_ data: SyntaxData) {
    let node = SwitchExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTernaryExprSyntax(_ data: SyntaxData) {
    let node = TernaryExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplThrowStmtSyntax(_ data: SyntaxData) {
    let node = ThrowStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTryExprSyntax(_ data: SyntaxData) {
    let node = TryExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTupleExprSyntax(_ data: SyntaxData) {
    let node = TupleExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTuplePatternElementListSyntax(_ data: SyntaxData) {
    let node = TuplePatternElementListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTuplePatternElementSyntax(_ data: SyntaxData) {
    let node = TuplePatternElementSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTuplePatternSyntax(_ data: SyntaxData) {
    let node = TuplePatternSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTupleTypeElementListSyntax(_ data: SyntaxData) {
    let node = TupleTypeElementListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTupleTypeElementSyntax(_ data: SyntaxData) {
    let node = TupleTypeElementSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTupleTypeSyntax(_ data: SyntaxData) {
    let node = TupleTypeSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTypeAliasDeclSyntax(_ data: SyntaxData) {
    let node = TypeAliasDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTypeAnnotationSyntax(_ data: SyntaxData) {
    let node = TypeAnnotationSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTypeEffectSpecifiersSyntax(_ data: SyntaxData) {
    let node = TypeEffectSpecifiersSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTypeExprSyntax(_ data: SyntaxData) {
    let node = TypeExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplTypeInitializerClauseSyntax(_ data: SyntaxData) {
    let node = TypeInitializerClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplUnavailableFromAsyncAttributeArgumentsSyntax(_ data: SyntaxData) {
    let node = UnavailableFromAsyncAttributeArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplUnderscorePrivateAttributeArgumentsSyntax(_ data: SyntaxData) {
    let node = UnderscorePrivateAttributeArgumentsSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplUnexpectedNodesSyntax(_ data: SyntaxData) {
    let node = UnexpectedNodesSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplUnresolvedAsExprSyntax(_ data: SyntaxData) {
    let node = UnresolvedAsExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplUnresolvedIsExprSyntax(_ data: SyntaxData) {
    let node = UnresolvedIsExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplUnresolvedTernaryExprSyntax(_ data: SyntaxData) {
    let node = UnresolvedTernaryExprSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplValueBindingPatternSyntax(_ data: SyntaxData) {
    let node = ValueBindingPatternSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplVariableDeclSyntax(_ data: SyntaxData) {
    let node = VariableDeclSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplVersionComponentListSyntax(_ data: SyntaxData) {
    let node = VersionComponentListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplVersionComponentSyntax(_ data: SyntaxData) {
    let node = VersionComponentSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplVersionTupleSyntax(_ data: SyntaxData) {
    let node = VersionTupleSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplWhereClauseSyntax(_ data: SyntaxData) {
    let node = WhereClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplWhileStmtSyntax(_ data: SyntaxData) {
    let node = WhileStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplWildcardPatternSyntax(_ data: SyntaxData) {
    let node = WildcardPatternSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplYieldStmtSyntax(_ data: SyntaxData) {
    let node = YieldStmtSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplYieldedExpressionListSyntax(_ data: SyntaxData) {
    let node = YieldedExpressionListSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplYieldedExpressionSyntax(_ data: SyntaxData) {
    let node = YieldedExpressionSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  /// Implementation detail of doVisit(_:_:). Do not call directly.
  private func visitImplYieldedExpressionsClauseSyntax(_ data: SyntaxData) {
    let node = YieldedExpressionsClauseSyntax(data)
    let needsChildren = (visit(node) == .visitChildren)
    // Avoid calling into visitChildren if possible.
    if needsChildren && !node.raw.layoutView!.children.isEmpty {
      visitChildren(node)
    }
    visitPost(node)
  }
  
  private func visit(_ data: SyntaxData) {
    switch data.raw.kind {
    case .token:
      let node = TokenSyntax(data)
      _ = visit(node)
      // No children to visit.
      visitPost(node)
    case .accessorBlock:
      visitImplAccessorBlockSyntax(data)
    case .accessorDeclList:
      visitImplAccessorDeclListSyntax(data)
    case .accessorDecl:
      visitImplAccessorDeclSyntax(data)
    case .accessorEffectSpecifiers:
      visitImplAccessorEffectSpecifiersSyntax(data)
    case .accessorParameters:
      visitImplAccessorParametersSyntax(data)
    case .actorDecl:
      visitImplActorDeclSyntax(data)
    case .arrayElementList:
      visitImplArrayElementListSyntax(data)
    case .arrayElement:
      visitImplArrayElementSyntax(data)
    case .arrayExpr:
      visitImplArrayExprSyntax(data)
    case .arrayType:
      visitImplArrayTypeSyntax(data)
    case .arrowExpr:
      visitImplArrowExprSyntax(data)
    case .asExpr:
      visitImplAsExprSyntax(data)
    case .assignmentExpr:
      visitImplAssignmentExprSyntax(data)
    case .associatedTypeDecl:
      visitImplAssociatedTypeDeclSyntax(data)
    case .attributeList:
      visitImplAttributeListSyntax(data)
    case .attribute:
      visitImplAttributeSyntax(data)
    case .attributedType:
      visitImplAttributedTypeSyntax(data)
    case .availabilityArgumentList:
      visitImplAvailabilityArgumentListSyntax(data)
    case .availabilityArgument:
      visitImplAvailabilityArgumentSyntax(data)
    case .availabilityCondition:
      visitImplAvailabilityConditionSyntax(data)
    case .availabilityLabeledArgument:
      visitImplAvailabilityLabeledArgumentSyntax(data)
    case .awaitExpr:
      visitImplAwaitExprSyntax(data)
    case .backDeployedAttributeArguments:
      visitImplBackDeployedAttributeArgumentsSyntax(data)
    case .binaryOperatorExpr:
      visitImplBinaryOperatorExprSyntax(data)
    case .booleanLiteralExpr:
      visitImplBooleanLiteralExprSyntax(data)
    case .borrowExpr:
      visitImplBorrowExprSyntax(data)
    case .breakStmt:
      visitImplBreakStmtSyntax(data)
    case .canImportExpr:
      visitImplCanImportExprSyntax(data)
    case .canImportVersionInfo:
      visitImplCanImportVersionInfoSyntax(data)
    case .catchClauseList:
      visitImplCatchClauseListSyntax(data)
    case .catchClause:
      visitImplCatchClauseSyntax(data)
    case .catchItemList:
      visitImplCatchItemListSyntax(data)
    case .catchItem:
      visitImplCatchItemSyntax(data)
    case .classDecl:
      visitImplClassDeclSyntax(data)
    case .classRestrictionType:
      visitImplClassRestrictionTypeSyntax(data)
    case .closureCaptureClause:
      visitImplClosureCaptureClauseSyntax(data)
    case .closureCaptureList:
      visitImplClosureCaptureListSyntax(data)
    case .closureCaptureSpecifier:
      visitImplClosureCaptureSpecifierSyntax(data)
    case .closureCapture:
      visitImplClosureCaptureSyntax(data)
    case .closureExpr:
      visitImplClosureExprSyntax(data)
    case .closureParameterClause:
      visitImplClosureParameterClauseSyntax(data)
    case .closureParameterList:
      visitImplClosureParameterListSyntax(data)
    case .closureParameter:
      visitImplClosureParameterSyntax(data)
    case .closureShorthandParameterList:
      visitImplClosureShorthandParameterListSyntax(data)
    case .closureShorthandParameter:
      visitImplClosureShorthandParameterSyntax(data)
    case .closureSignature:
      visitImplClosureSignatureSyntax(data)
    case .codeBlockItemList:
      visitImplCodeBlockItemListSyntax(data)
    case .codeBlockItem:
      visitImplCodeBlockItemSyntax(data)
    case .codeBlock:
      visitImplCodeBlockSyntax(data)
    case .compositionTypeElementList:
      visitImplCompositionTypeElementListSyntax(data)
    case .compositionTypeElement:
      visitImplCompositionTypeElementSyntax(data)
    case .compositionType:
      visitImplCompositionTypeSyntax(data)
    case .conditionElementList:
      visitImplConditionElementListSyntax(data)
    case .conditionElement:
      visitImplConditionElementSyntax(data)
    case .conformanceRequirement:
      visitImplConformanceRequirementSyntax(data)
    case .consumeExpr:
      visitImplConsumeExprSyntax(data)
    case .continueStmt:
      visitImplContinueStmtSyntax(data)
    case .conventionAttributeArguments:
      visitImplConventionAttributeArgumentsSyntax(data)
    case .conventionWitnessMethodAttributeArguments:
      visitImplConventionWitnessMethodAttributeArgumentsSyntax(data)
    case .copyExpr:
      visitImplCopyExprSyntax(data)
    case .declModifierDetail:
      visitImplDeclModifierDetailSyntax(data)
    case .declModifierList:
      visitImplDeclModifierListSyntax(data)
    case .declModifier:
      visitImplDeclModifierSyntax(data)
    case .declNameArgumentList:
      visitImplDeclNameArgumentListSyntax(data)
    case .declNameArgument:
      visitImplDeclNameArgumentSyntax(data)
    case .declNameArguments:
      visitImplDeclNameArgumentsSyntax(data)
    case .declName:
      visitImplDeclNameSyntax(data)
    case .deferStmt:
      visitImplDeferStmtSyntax(data)
    case .deinitializerDecl:
      visitImplDeinitializerDeclSyntax(data)
    case .deinitializerEffectSpecifiers:
      visitImplDeinitializerEffectSpecifiersSyntax(data)
    case .derivativeAttributeArguments:
      visitImplDerivativeAttributeArgumentsSyntax(data)
    case .designatedTypeList:
      visitImplDesignatedTypeListSyntax(data)
    case .designatedType:
      visitImplDesignatedTypeSyntax(data)
    case .dictionaryElementList:
      visitImplDictionaryElementListSyntax(data)
    case .dictionaryElement:
      visitImplDictionaryElementSyntax(data)
    case .dictionaryExpr:
      visitImplDictionaryExprSyntax(data)
    case .dictionaryType:
      visitImplDictionaryTypeSyntax(data)
    case .differentiabilityArgumentList:
      visitImplDifferentiabilityArgumentListSyntax(data)
    case .differentiabilityArgument:
      visitImplDifferentiabilityArgumentSyntax(data)
    case .differentiabilityArguments:
      visitImplDifferentiabilityArgumentsSyntax(data)
    case .differentiabilityWithRespectToArgument:
      visitImplDifferentiabilityWithRespectToArgumentSyntax(data)
    case .differentiableAttributeArguments:
      visitImplDifferentiableAttributeArgumentsSyntax(data)
    case .discardAssignmentExpr:
      visitImplDiscardAssignmentExprSyntax(data)
    case .discardStmt:
      visitImplDiscardStmtSyntax(data)
    case .doStmt:
      visitImplDoStmtSyntax(data)
    case .documentationAttributeArgumentList:
      visitImplDocumentationAttributeArgumentListSyntax(data)
    case .documentationAttributeArgument:
      visitImplDocumentationAttributeArgumentSyntax(data)
    case .dynamicReplacementAttributeArguments:
      visitImplDynamicReplacementAttributeArgumentsSyntax(data)
    case .editorPlaceholderDecl:
      visitImplEditorPlaceholderDeclSyntax(data)
    case .editorPlaceholderExpr:
      visitImplEditorPlaceholderExprSyntax(data)
    case .effectsAttributeArgumentList:
      visitImplEffectsAttributeArgumentListSyntax(data)
    case .enumCaseDecl:
      visitImplEnumCaseDeclSyntax(data)
    case .enumCaseElementList:
      visitImplEnumCaseElementListSyntax(data)
    case .enumCaseElement:
      visitImplEnumCaseElementSyntax(data)
    case .enumCaseParameterClause:
      visitImplEnumCaseParameterClauseSyntax(data)
    case .enumCaseParameterList:
      visitImplEnumCaseParameterListSyntax(data)
    case .enumCaseParameter:
      visitImplEnumCaseParameterSyntax(data)
    case .enumDecl:
      visitImplEnumDeclSyntax(data)
    case .exposeAttributeArguments:
      visitImplExposeAttributeArgumentsSyntax(data)
    case .exprList:
      visitImplExprListSyntax(data)
    case .expressionPattern:
      visitImplExpressionPatternSyntax(data)
    case .expressionSegment:
      visitImplExpressionSegmentSyntax(data)
    case .expressionStmt:
      visitImplExpressionStmtSyntax(data)
    case .extensionDecl:
      visitImplExtensionDeclSyntax(data)
    case .fallThroughStmt:
      visitImplFallThroughStmtSyntax(data)
    case .floatLiteralExpr:
      visitImplFloatLiteralExprSyntax(data)
    case .forStmt:
      visitImplForStmtSyntax(data)
    case .forceUnwrapExpr:
      visitImplForceUnwrapExprSyntax(data)
    case .functionCallExpr:
      visitImplFunctionCallExprSyntax(data)
    case .functionDecl:
      visitImplFunctionDeclSyntax(data)
    case .functionEffectSpecifiers:
      visitImplFunctionEffectSpecifiersSyntax(data)
    case .functionParameterClause:
      visitImplFunctionParameterClauseSyntax(data)
    case .functionParameterList:
      visitImplFunctionParameterListSyntax(data)
    case .functionParameter:
      visitImplFunctionParameterSyntax(data)
    case .functionSignature:
      visitImplFunctionSignatureSyntax(data)
    case .functionType:
      visitImplFunctionTypeSyntax(data)
    case .genericArgumentClause:
      visitImplGenericArgumentClauseSyntax(data)
    case .genericArgumentList:
      visitImplGenericArgumentListSyntax(data)
    case .genericArgument:
      visitImplGenericArgumentSyntax(data)
    case .genericParameterClause:
      visitImplGenericParameterClauseSyntax(data)
    case .genericParameterList:
      visitImplGenericParameterListSyntax(data)
    case .genericParameter:
      visitImplGenericParameterSyntax(data)
    case .genericRequirementList:
      visitImplGenericRequirementListSyntax(data)
    case .genericRequirement:
      visitImplGenericRequirementSyntax(data)
    case .genericSpecializationExpr:
      visitImplGenericSpecializationExprSyntax(data)
    case .genericWhereClause:
      visitImplGenericWhereClauseSyntax(data)
    case .guardStmt:
      visitImplGuardStmtSyntax(data)
    case .identifierExpr:
      visitImplIdentifierExprSyntax(data)
    case .identifierPattern:
      visitImplIdentifierPatternSyntax(data)
    case .identifierType:
      visitImplIdentifierTypeSyntax(data)
    case .ifConfigClauseList:
      visitImplIfConfigClauseListSyntax(data)
    case .ifConfigClause:
      visitImplIfConfigClauseSyntax(data)
    case .ifConfigDecl:
      visitImplIfConfigDeclSyntax(data)
    case .ifExpr:
      visitImplIfExprSyntax(data)
    case .implementsAttributeArguments:
      visitImplImplementsAttributeArgumentsSyntax(data)
    case .implicitlyUnwrappedOptionalType:
      visitImplImplicitlyUnwrappedOptionalTypeSyntax(data)
    case .importDecl:
      visitImplImportDeclSyntax(data)
    case .importPathComponentList:
      visitImplImportPathComponentListSyntax(data)
    case .importPathComponent:
      visitImplImportPathComponentSyntax(data)
    case .inOutExpr:
      visitImplInOutExprSyntax(data)
    case .infixOperatorExpr:
      visitImplInfixOperatorExprSyntax(data)
    case .inheritanceClause:
      visitImplInheritanceClauseSyntax(data)
    case .inheritedTypeList:
      visitImplInheritedTypeListSyntax(data)
    case .inheritedType:
      visitImplInheritedTypeSyntax(data)
    case .initializerClause:
      visitImplInitializerClauseSyntax(data)
    case .initializerDecl:
      visitImplInitializerDeclSyntax(data)
    case .integerLiteralExpr:
      visitImplIntegerLiteralExprSyntax(data)
    case .isExpr:
      visitImplIsExprSyntax(data)
    case .isTypePattern:
      visitImplIsTypePatternSyntax(data)
    case .keyPathComponentList:
      visitImplKeyPathComponentListSyntax(data)
    case .keyPathComponent:
      visitImplKeyPathComponentSyntax(data)
    case .keyPathExpr:
      visitImplKeyPathExprSyntax(data)
    case .keyPathOptionalComponent:
      visitImplKeyPathOptionalComponentSyntax(data)
    case .keyPathPropertyComponent:
      visitImplKeyPathPropertyComponentSyntax(data)
    case .keyPathSubscriptComponent:
      visitImplKeyPathSubscriptComponentSyntax(data)
    case .labeledExprList:
      visitImplLabeledExprListSyntax(data)
    case .labeledExpr:
      visitImplLabeledExprSyntax(data)
    case .labeledSpecializeArgument:
      visitImplLabeledSpecializeArgumentSyntax(data)
    case .labeledStmt:
      visitImplLabeledStmtSyntax(data)
    case .layoutRequirement:
      visitImplLayoutRequirementSyntax(data)
    case .macroDecl:
      visitImplMacroDeclSyntax(data)
    case .macroExpansionDecl:
      visitImplMacroExpansionDeclSyntax(data)
    case .macroExpansionExpr:
      visitImplMacroExpansionExprSyntax(data)
    case .matchingPatternCondition:
      visitImplMatchingPatternConditionSyntax(data)
    case .memberAccessExpr:
      visitImplMemberAccessExprSyntax(data)
    case .memberBlockItemList:
      visitImplMemberBlockItemListSyntax(data)
    case .memberBlockItem:
      visitImplMemberBlockItemSyntax(data)
    case .memberBlock:
      visitImplMemberBlockSyntax(data)
    case .memberType:
      visitImplMemberTypeSyntax(data)
    case .metatypeType:
      visitImplMetatypeTypeSyntax(data)
    case .missingDecl:
      visitImplMissingDeclSyntax(data)
    case .missingExpr:
      visitImplMissingExprSyntax(data)
    case .missingPattern:
      visitImplMissingPatternSyntax(data)
    case .missingStmt:
      visitImplMissingStmtSyntax(data)
    case .missing:
      visitImplMissingSyntax(data)
    case .missingType:
      visitImplMissingTypeSyntax(data)
    case .multipleTrailingClosureElementList:
      visitImplMultipleTrailingClosureElementListSyntax(data)
    case .multipleTrailingClosureElement:
      visitImplMultipleTrailingClosureElementSyntax(data)
    case .namedOpaqueReturnType:
      visitImplNamedOpaqueReturnTypeSyntax(data)
    case .nilLiteralExpr:
      visitImplNilLiteralExprSyntax(data)
    case .objCSelectorPieceList:
      visitImplObjCSelectorPieceListSyntax(data)
    case .objCSelectorPiece:
      visitImplObjCSelectorPieceSyntax(data)
    case .opaqueReturnTypeOfAttributeArguments:
      visitImplOpaqueReturnTypeOfAttributeArgumentsSyntax(data)
    case .operatorDecl:
      visitImplOperatorDeclSyntax(data)
    case .operatorPrecedenceAndTypes:
      visitImplOperatorPrecedenceAndTypesSyntax(data)
    case .optionalBindingCondition:
      visitImplOptionalBindingConditionSyntax(data)
    case .optionalChainingExpr:
      visitImplOptionalChainingExprSyntax(data)
    case .optionalType:
      visitImplOptionalTypeSyntax(data)
    case .originallyDefinedInAttributeArguments:
      visitImplOriginallyDefinedInAttributeArgumentsSyntax(data)
    case .packElementExpr:
      visitImplPackElementExprSyntax(data)
    case .packElementType:
      visitImplPackElementTypeSyntax(data)
    case .packExpansionExpr:
      visitImplPackExpansionExprSyntax(data)
    case .packExpansionType:
      visitImplPackExpansionTypeSyntax(data)
    case .patternBindingList:
      visitImplPatternBindingListSyntax(data)
    case .patternBinding:
      visitImplPatternBindingSyntax(data)
    case .patternExpr:
      visitImplPatternExprSyntax(data)
    case .platformVersionItemList:
      visitImplPlatformVersionItemListSyntax(data)
    case .platformVersionItem:
      visitImplPlatformVersionItemSyntax(data)
    case .platformVersion:
      visitImplPlatformVersionSyntax(data)
    case .postfixIfConfigExpr:
      visitImplPostfixIfConfigExprSyntax(data)
    case .postfixOperatorExpr:
      visitImplPostfixOperatorExprSyntax(data)
    case .poundSourceLocationArguments:
      visitImplPoundSourceLocationArgumentsSyntax(data)
    case .poundSourceLocation:
      visitImplPoundSourceLocationSyntax(data)
    case .precedenceGroupAssignment:
      visitImplPrecedenceGroupAssignmentSyntax(data)
    case .precedenceGroupAssociativity:
      visitImplPrecedenceGroupAssociativitySyntax(data)
    case .precedenceGroupAttributeList:
      visitImplPrecedenceGroupAttributeListSyntax(data)
    case .precedenceGroupDecl:
      visitImplPrecedenceGroupDeclSyntax(data)
    case .precedenceGroupNameList:
      visitImplPrecedenceGroupNameListSyntax(data)
    case .precedenceGroupName:
      visitImplPrecedenceGroupNameSyntax(data)
    case .precedenceGroupRelation:
      visitImplPrecedenceGroupRelationSyntax(data)
    case .prefixOperatorExpr:
      visitImplPrefixOperatorExprSyntax(data)
    case .primaryAssociatedTypeClause:
      visitImplPrimaryAssociatedTypeClauseSyntax(data)
    case .primaryAssociatedTypeList:
      visitImplPrimaryAssociatedTypeListSyntax(data)
    case .primaryAssociatedType:
      visitImplPrimaryAssociatedTypeSyntax(data)
    case .protocolDecl:
      visitImplProtocolDeclSyntax(data)
    case .qualifiedDeclName:
      visitImplQualifiedDeclNameSyntax(data)
    case .regexLiteralExpr:
      visitImplRegexLiteralExprSyntax(data)
    case .repeatStmt:
      visitImplRepeatStmtSyntax(data)
    case .returnClause:
      visitImplReturnClauseSyntax(data)
    case .returnStmt:
      visitImplReturnStmtSyntax(data)
    case .sameTypeRequirement:
      visitImplSameTypeRequirementSyntax(data)
    case .sequenceExpr:
      visitImplSequenceExprSyntax(data)
    case .someOrAnyType:
      visitImplSomeOrAnyTypeSyntax(data)
    case .sourceFile:
      visitImplSourceFileSyntax(data)
    case .specializeAttributeArgumentList:
      visitImplSpecializeAttributeArgumentListSyntax(data)
    case .specializeAvailabilityArgument:
      visitImplSpecializeAvailabilityArgumentSyntax(data)
    case .specializeTargetFunctionArgument:
      visitImplSpecializeTargetFunctionArgumentSyntax(data)
    case .stringLiteralExpr:
      visitImplStringLiteralExprSyntax(data)
    case .stringLiteralSegmentList:
      visitImplStringLiteralSegmentListSyntax(data)
    case .stringSegment:
      visitImplStringSegmentSyntax(data)
    case .structDecl:
      visitImplStructDeclSyntax(data)
    case .subscriptCallExpr:
      visitImplSubscriptCallExprSyntax(data)
    case .subscriptDecl:
      visitImplSubscriptDeclSyntax(data)
    case .superExpr:
      visitImplSuperExprSyntax(data)
    case .suppressedType:
      visitImplSuppressedTypeSyntax(data)
    case .switchCaseItemList:
      visitImplSwitchCaseItemListSyntax(data)
    case .switchCaseItem:
      visitImplSwitchCaseItemSyntax(data)
    case .switchCaseLabel:
      visitImplSwitchCaseLabelSyntax(data)
    case .switchCaseList:
      visitImplSwitchCaseListSyntax(data)
    case .switchCase:
      visitImplSwitchCaseSyntax(data)
    case .switchDefaultLabel:
      visitImplSwitchDefaultLabelSyntax(data)
    case .switchExpr:
      visitImplSwitchExprSyntax(data)
    case .ternaryExpr:
      visitImplTernaryExprSyntax(data)
    case .throwStmt:
      visitImplThrowStmtSyntax(data)
    case .tryExpr:
      visitImplTryExprSyntax(data)
    case .tupleExpr:
      visitImplTupleExprSyntax(data)
    case .tuplePatternElementList:
      visitImplTuplePatternElementListSyntax(data)
    case .tuplePatternElement:
      visitImplTuplePatternElementSyntax(data)
    case .tuplePattern:
      visitImplTuplePatternSyntax(data)
    case .tupleTypeElementList:
      visitImplTupleTypeElementListSyntax(data)
    case .tupleTypeElement:
      visitImplTupleTypeElementSyntax(data)
    case .tupleType:
      visitImplTupleTypeSyntax(data)
    case .typeAliasDecl:
      visitImplTypeAliasDeclSyntax(data)
    case .typeAnnotation:
      visitImplTypeAnnotationSyntax(data)
    case .typeEffectSpecifiers:
      visitImplTypeEffectSpecifiersSyntax(data)
    case .typeExpr:
      visitImplTypeExprSyntax(data)
    case .typeInitializerClause:
      visitImplTypeInitializerClauseSyntax(data)
    case .unavailableFromAsyncAttributeArguments:
      visitImplUnavailableFromAsyncAttributeArgumentsSyntax(data)
    case .underscorePrivateAttributeArguments:
      visitImplUnderscorePrivateAttributeArgumentsSyntax(data)
    case .unexpectedNodes:
      visitImplUnexpectedNodesSyntax(data)
    case .unresolvedAsExpr:
      visitImplUnresolvedAsExprSyntax(data)
    case .unresolvedIsExpr:
      visitImplUnresolvedIsExprSyntax(data)
    case .unresolvedTernaryExpr:
      visitImplUnresolvedTernaryExprSyntax(data)
    case .valueBindingPattern:
      visitImplValueBindingPatternSyntax(data)
    case .variableDecl:
      visitImplVariableDeclSyntax(data)
    case .versionComponentList:
      visitImplVersionComponentListSyntax(data)
    case .versionComponent:
      visitImplVersionComponentSyntax(data)
    case .versionTuple:
      visitImplVersionTupleSyntax(data)
    case .whereClause:
      visitImplWhereClauseSyntax(data)
    case .whileStmt:
      visitImplWhileStmtSyntax(data)
    case .wildcardPattern:
      visitImplWildcardPatternSyntax(data)
    case .yieldStmt:
      visitImplYieldStmtSyntax(data)
    case .yieldedExpressionList:
      visitImplYieldedExpressionListSyntax(data)
    case .yieldedExpression:
      visitImplYieldedExpressionSyntax(data)
    case .yieldedExpressionsClause:
      visitImplYieldedExpressionsClauseSyntax(data)
    }
  }
  
  private func visitChildren(_ node: some SyntaxProtocol) {
    let syntaxNode = Syntax(node)
    for childRaw in NonNilRawSyntaxChildren(syntaxNode, viewMode: viewMode) {
      let childData = SyntaxData(childRaw, parent: syntaxNode)
      visit(childData)
    }
  }
}
