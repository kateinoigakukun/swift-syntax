%{
  # -*- mode: Swift -*-
  from gyb_syntax_support import *
  from gyb_syntax_support.Traits import TRAITS
  NODE_MAP = create_node_map()
  # Ignore the following admonition it applies to the resulting .swift file only
}%
//// Automatically Generated From SyntaxNodes.swift.gyb.
//// Do Not Edit Directly!
//===------------ SyntaxNodes.swift - Syntax Node definitions -------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
"""
This gyb-file generates the syntax nodes for SwiftSyntax. To keep the generated
files at a managable file size, it is to be invoked multiple times with the
global variable EMIT_KIND set to a base kind listed in
gyb_syntax_support/kinds.py:SYNTAX_BASE_KINDES. It then only emits those syntax
nodes whose base kind are that specified kind.
"""
}%

% for node in SYNTAX_NODES:
%   base_type = node.base_type
%   if node.is_base():
%     # Handled in SyntaxNodesBase.swift.gyb
%     pass
%   elif node.collection_element:
%     # Handled in SyntaxCollections.swift.gyb
%     pass
%   elif node.base_kind != EMIT_KIND:
%     pass
%   else:
%     # We are actually handling this node now
// MARK: - ${node.name}

%     for line in dedented_lines(node.description):
/// ${line}
%     end
public struct ${node.name}: ${base_type}Protocol, SyntaxHashable {
%     for child in node.children:
%       if child.node_choices:
  public enum ${child.name}: SyntaxChildChoices {
%         for choice in child.node_choices:
    case `${choice.swift_name}`(${choice.type_name})
%         end
    public var _syntaxNode: Syntax {
      switch self {
%         for choice in child.node_choices:
      case .${choice.swift_name}(let node): return node._syntaxNode
%         end
      }
    }
    init(_ data: SyntaxData) { self.init(Syntax(data))! }
%         for choice in child.node_choices:
%           choice_node = NODE_MAP.get(choice.syntax_kind)
%           if choice_node and choice_node.is_base():
    public init<Node: ${choice_node.name}Protocol>(_ node: Node) {
      self = .${choice.swift_name}(${choice_node.name}(node))
    }
%           else:
    public init(_ node: ${choice.type_name}) {
      self = .${choice.swift_name}(node)
    }
%           end
%         end
    public init?<S: SyntaxProtocol>(_ node: S) {
%         for choice in child.node_choices:
      if let node = node.as(${choice.type_name}.self) {
        self = .${choice.swift_name}(node)
        return
      }
%         end
      return nil
    }

    public static var structure: SyntaxNodeStructure {
      return .choices([
%         for choice in child.node_choices:
        .node(${choice.type_name}.self),
%         end
      ])
    }
  }

%       end
%     end
%     # ==============
%     # Initialization
%     # ==============
%
  public let _syntaxNode: Syntax

  public init?<S: SyntaxProtocol>(_ node: S) {
    guard node.raw.kind == .${node.swift_syntax_kind} else { return nil }
    self._syntaxNode = node._syntaxNode
  }

  /// Creates a `${node.name}` node from the given `SyntaxData`. This assumes
  /// that the `SyntaxData` is of the correct kind. If it is not, the behaviour
  /// is undefined.
  internal init(_ data: SyntaxData) {
    assert(data.raw.kind == .${node.swift_syntax_kind})
    self._syntaxNode = Syntax(data)
  }

  ${node.generate_initializer_decl(optional_base_as_missing=False, current_indentation="  ")} {
%     if node.children:
    let layout: [RawSyntax?] = [
%       for child in node.children:
%         if child.is_optional:
      ${child.swift_name}?.raw,
%         else:
      ${child.swift_name}.raw,
%         end
%       end
    ]
%     end
    let data: SyntaxData = withExtendedLifetime(SyntaxArena()) { arena in
%     if node.children:
      let raw = RawSyntax.makeLayout(
        kind: SyntaxKind.${node.swift_syntax_kind}, from: layout, arena: arena,
        leadingTrivia: leadingTrivia, trailingTrivia: trailingTrivia)
%     else:
      let raw = RawSyntax.makeEmptyLayout(kind: SyntaxKind.${node.swift_syntax_kind}, arena: arena)
%     end
      return SyntaxData.forRoot(raw)
    }
    self.init(data)
  }
%     if node.has_optional_base_type_child():

% # TODO: Remove when we no longer support compiling in Swift 5.6. Change the
% # above constructor to use `Optional<BaseType.none` instead.
  /// This initializer exists solely because Swift 5.6 does not support
  /// `Optional<ConcreteType>.none` as a default value of a generic parameter.
  /// The above initializer thus defaults to `nil` instead, but that means it
  /// is not actually callable when either not passing the defaulted parameter,
  /// or passing `nil`.
  ///
  /// Hack around that limitation using this initializer, which takes a
  /// `Missing*` syntax node instead. `Missing*` is used over the base type as
  /// the base type would allow implicit conversion from a string literal,
  /// which the above initializer doesn't support.
  ${node.generate_initializer_decl(optional_base_as_missing=True, current_indentation="  ")} {
    self.init(
      leadingTrivia: leadingTrivia,
%     for child in node.children:
%       if child.has_optional_base_type():
      ${child.swift_name}: Optional<${child.type_name}>.none,
%       elif child.is_unexpected_nodes():
      ${child.swift_name},
%       else:
      ${child.swift_name}: ${child.swift_name},
%       end
%     end
      trailingTrivia: trailingTrivia
    )
  }
%     end
%     for (idx, child) in enumerate(node.children):
%       child_node = NODE_MAP.get(child.syntax_kind)
%
%       # ===================
%       # Children properties
%       # ===================
%
%       child_type = child.type_name
%       if child.node_choices:
%         child_type = child.name
%       optional_mark = "?" if child.is_optional else ""

%       for line in dedented_lines(child.description):
  /// ${line}
%       end
  public var ${child.swift_name}: ${child_type}${optional_mark} {
    get {
      let childData = data.child(at: ${idx}, parent: Syntax(self))
%       if child.is_optional:
      if childData == nil { return nil }
%       end
      return ${child_type}(childData!)
    }
    set(value) {
      self = with${child.name}(value)
    }
  }
%
%       # ===============
%       # Adding children
%       # ===============
%       # We don't currently support adding elements to a specific unexpected collection.
%       # If needed, this could be added in the future, but for now withUnexpected should be sufficient.
%       if child_node and child_node.is_syntax_collection() and not child.is_unexpected_nodes():
%         child_elt = child.collection_element_name
%         child_elt_type = child_node.collection_element_type
%         if not child_elt:
%           raise Exception("'collection_element_name' should be set for '%s' of '%s'" % (child.name, node.name))
%         end

  /// Adds the provided `${child_elt}` to the node's `${child.swift_name}`
  /// collection.
  /// - param element: The new `${child_elt}` to add to the node's
  ///                  `${child.swift_name}` collection.
  /// - returns: A copy of the receiver with the provided `${child_elt}`
  ///            appended to its `${child.swift_name}` collection.
  public func add${child_elt}(_ element: ${child_elt_type}) -> ${node.name} {
    var collection: RawSyntax
    let arena = SyntaxArena()
    if let col = raw.layoutView!.children[${idx}] {
      collection = col.layoutView!.appending(element.raw, arena: arena)
    } else {
      collection = RawSyntax.makeLayout(kind: SyntaxKind.${child_node.swift_syntax_kind},
        from: [element.raw], arena: arena)
    }
    let newData = data.replacingChild(at: ${idx}, with: collection, arena: arena)
    return ${node.name}(newData)
  }
%       end

%       # ===================
%       # Replacing children
%       # ===================
  /// Returns a copy of the receiver with its `${child.swift_name}` replaced.
  /// - param newChild: The new `${child.swift_name}` to replace the node's
  ///                   current `${child.swift_name}`, if present.
  public func with${child.name}(_ newChild: ${child_type}?) -> ${node.name} {
    let arena = SyntaxArena()
%       if child.is_optional:
    let raw = newChild?.raw
%       else:
    let raw = newChild?.raw ?? ${make_missing_swift_child(child)}
%       end
    let newData = data.replacingChild(at: ${idx}, with: raw, arena: arena)
    return ${node.name}(newData)
  }
%     end

  public static var structure: SyntaxNodeStructure {
    return .layout([
%     for (index, child) in enumerate(node.children):
      \Self.${child.swift_name},
%     end
    ])
  }

  public func childNameForDiagnostics(_ index: SyntaxChildrenIndex) -> String? {
    switch index.data?.indexInParent {
%     for (index, child) in enumerate(node.children):
    case ${index}:
%       if child.name_for_diagnostics:
      return "${child.name_for_diagnostics}"
%       else:
      return nil
%       end
%     end
    default:
      fatalError("Invalid index")
    }
  }
}

extension ${node.name}: CustomReflectable {
  public var customMirror: Mirror {
    return Mirror(self, children: [
%     for child in node.children:
%       if child.is_optional:
      "${child.swift_name}": ${child.swift_name}.map(Syntax.init)?.asProtocol(SyntaxProtocol.self) as Any,
%       else:
      "${child.swift_name}": Syntax(${child.swift_name}).asProtocol(SyntaxProtocol.self),
%       end
%     end
    ])
  }
}

%   end
% end
