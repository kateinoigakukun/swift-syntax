//// Automatically generated by generate-swiftsyntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import SwiftSyntax

public extension SyntaxProtocol {
  var requiresIndent: Bool {
    guard let keyPath = keyPathInParent else {
      return false
    }
    return keyPath.requiresIndent
  }
}

fileprivate extension AnyKeyPath {
  var requiresIndent: Bool {
    switch self {
    case \AccessorBlockSyntax.accessors:
      return true
    case \ArrayExprSyntax.elements:
      return true
    case \ClosureExprSyntax.statements:
      return true
    case \ClosureParameterClauseSyntax.parameterList:
      return true
    case \CodeBlockSyntax.statements:
      return true
    case \DictionaryElementSyntax.valueExpression:
      return true
    case \DictionaryExprSyntax.content:
      return true
    case \EnumCaseParameterClauseSyntax.parameterList:
      return true
    case \FunctionCallExprSyntax.argumentList:
      return true
    case \FunctionTypeSyntax.parameters:
      return true
    case \MemberDeclBlockSyntax.members:
      return true
    case \ParameterClauseSyntax.parameterList:
      return true
    case \SwitchCaseSyntax.statements:
      return true
    case \TupleExprSyntax.elements:
      return true
    case \TupleTypeSyntax.elements:
      return true
    default:
      return false
    }
  }
  
  var requiresLeadingSpace: Bool? {
    switch self {
    case \AvailabilityArgumentSyntax.entry:
      return false
    case \FunctionParameterSyntax.secondName:
      return true
    case \MissingDeclSyntax.placeholder:
      return false
    case \MissingExprSyntax.placeholder:
      return false
    case \MissingPatternSyntax.placeholder:
      return false
    case \MissingStmtSyntax.placeholder:
      return false
    case \MissingSyntax.placeholder:
      return false
    case \MissingTypeSyntax.placeholder:
      return false
    default:
      return nil
    }
  }
  
  var requiresTrailingSpace: Bool? {
    switch self {
    case \AvailabilityArgumentSyntax.entry:
      return false
    case \BreakStmtSyntax.breakKeyword:
      return false
    case \DeclNameArgumentSyntax.colon:
      return false
    case \DictionaryExprSyntax.content:
      return false
    case \DynamicReplacementArgumentsSyntax.forLabel:
      return false
    case \MissingDeclSyntax.placeholder:
      return false
    case \MissingExprSyntax.placeholder:
      return false
    case \MissingPatternSyntax.placeholder:
      return false
    case \MissingStmtSyntax.placeholder:
      return false
    case \MissingSyntax.placeholder:
      return false
    case \MissingTypeSyntax.placeholder:
      return false
    case \SwitchCaseLabelSyntax.colon:
      return false
    case \SwitchDefaultLabelSyntax.colon:
      return false
    case \TryExprSyntax.questionOrExclamationMark:
      return true
    default:
      return nil
    }
  }
}
