//// Automatically generated by generate-swiftsyntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

@_spi(RawSyntax) import SwiftSyntax

enum DeclarationModifier: TokenSpecSet {
  case `static`
  case `class`
  case final
  case required
  case optional
  case lazy
  case dynamic
  case infix
  case prefix
  case postfix
  case __consuming
  case mutating
  case nonmutating
  case convenience
  case override
  case `private`
  case `fileprivate`
  case `internal`
  case `public`
  case package
  case open
  case __setter_access
  case weak
  case unowned
  case `rethrows`
  case indirect
  case isolated
  case async
  case reasync
  case nonisolated
  case distributed
  case _const
  case _local
  case consuming
  case borrowing
  
  init?(lexeme: Lexer.Lexeme) {
    switch PrepareForKeywordMatch(lexeme) {
    case TokenSpec(.`static`):
      self = .`static`
    case TokenSpec(.`class`):
      self = .`class`
    case TokenSpec(.final):
      self = .final
    case TokenSpec(.required):
      self = .required
    case TokenSpec(.optional):
      self = .optional
    case TokenSpec(.lazy):
      self = .lazy
    case TokenSpec(.dynamic):
      self = .dynamic
    case TokenSpec(.infix):
      self = .infix
    case TokenSpec(.prefix):
      self = .prefix
    case TokenSpec(.postfix):
      self = .postfix
    case TokenSpec(.__consuming):
      self = .__consuming
    case TokenSpec(.mutating):
      self = .mutating
    case TokenSpec(.nonmutating):
      self = .nonmutating
    case TokenSpec(.convenience):
      self = .convenience
    case TokenSpec(.override):
      self = .override
    case TokenSpec(.`private`):
      self = .`private`
    case TokenSpec(.`fileprivate`):
      self = .`fileprivate`
    case TokenSpec(.`internal`):
      self = .`internal`
    case TokenSpec(.`public`):
      self = .`public`
    case TokenSpec(.package):
      self = .package
    case TokenSpec(.open):
      self = .open
    case TokenSpec(.__setter_access):
      self = .__setter_access
    case TokenSpec(.weak):
      self = .weak
    case TokenSpec(.unowned):
      self = .unowned
    case TokenSpec(.`rethrows`):
      self = .`rethrows`
    case TokenSpec(.indirect):
      self = .indirect
    case TokenSpec(.isolated):
      self = .isolated
    case TokenSpec(.async):
      self = .async
    case TokenSpec(.reasync):
      self = .reasync
    case TokenSpec(.nonisolated):
      self = .nonisolated
    case TokenSpec(.distributed):
      self = .distributed
    case TokenSpec(._const):
      self = ._const
    case TokenSpec(._local):
      self = ._local
    case TokenSpec(.consuming):
      self = .consuming
    case TokenSpec(.borrowing):
      self = .borrowing
    default:
      return nil
    }
  }
  
  var spec: TokenSpec {
    switch self {
    case .`static`:
      return .keyword(.`static`)
    case .`class`:
      return .keyword(.`class`)
    case .final:
      return .keyword(.final)
    case .required:
      return .keyword(.required)
    case .optional:
      return .keyword(.optional)
    case .lazy:
      return .keyword(.lazy)
    case .dynamic:
      return .keyword(.dynamic)
    case .infix:
      return .keyword(.infix)
    case .prefix:
      return .keyword(.prefix)
    case .postfix:
      return .keyword(.postfix)
    case .__consuming:
      return .keyword(.__consuming)
    case .mutating:
      return .keyword(.mutating)
    case .nonmutating:
      return .keyword(.nonmutating)
    case .convenience:
      return .keyword(.convenience)
    case .override:
      return .keyword(.override)
    case .`private`:
      return .keyword(.`private`)
    case .`fileprivate`:
      return .keyword(.`fileprivate`)
    case .`internal`:
      return .keyword(.`internal`)
    case .`public`:
      return .keyword(.`public`)
    case .package:
      return .keyword(.package)
    case .open:
      return .keyword(.open)
    case .__setter_access:
      return .keyword(.__setter_access)
    case .weak:
      return .keyword(.weak)
    case .unowned:
      return .keyword(.unowned)
    case .`rethrows`:
      return .keyword(.`rethrows`)
    case .indirect:
      return .keyword(.indirect)
    case .isolated:
      return .keyword(.isolated)
    case .async:
      return .keyword(.async)
    case .reasync:
      return .keyword(.reasync)
    case .nonisolated:
      return .keyword(.nonisolated)
    case .distributed:
      return .keyword(.distributed)
    case ._const:
      return .keyword(._const)
    case ._local:
      return .keyword(._local)
    case .consuming:
      return .keyword(.consuming)
    case .borrowing:
      return .keyword(.borrowing)
    }
  }
}
