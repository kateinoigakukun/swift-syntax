//// Automatically generated by generate-swiftsyntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

@_spi(RawSyntax) import SwiftSyntax

extension Parser {
  enum TypeAttribute: TokenSpecSet {
    case autoclosure
    case convention
    case noescape
    case escaping
    case differentiable
    case noDerivative
    case async
    case Sendable
    case unchecked
    case _local
    case _noMetadata
    case _opaqueReturnTypeOf
    
    init?(lexeme: Lexer.Lexeme) {
      switch PrepareForKeywordMatch(lexeme) {
      case TokenSpec(.autoclosure):
        self = .autoclosure
      case TokenSpec(.convention):
        self = .convention
      case TokenSpec(.noescape):
        self = .noescape
      case TokenSpec(.escaping):
        self = .escaping
      case TokenSpec(.differentiable):
        self = .differentiable
      case TokenSpec(.noDerivative):
        self = .noDerivative
      case TokenSpec(.async):
        self = .async
      case TokenSpec(.Sendable):
        self = .Sendable
      case TokenSpec(.unchecked):
        self = .unchecked
      case TokenSpec(._local):
        self = ._local
      case TokenSpec(._noMetadata):
        self = ._noMetadata
      case TokenSpec(._opaqueReturnTypeOf):
        self = ._opaqueReturnTypeOf
      default:
        return nil
      }
    }
    
    var spec: TokenSpec {
      switch self {
      case .autoclosure:
        return .keyword(.autoclosure)
      case .convention:
        return .keyword(.convention)
      case .noescape:
        return .keyword(.noescape)
      case .escaping:
        return .keyword(.escaping)
      case .differentiable:
        return .keyword(.differentiable)
      case .noDerivative:
        return .keyword(.noDerivative)
      case .async:
        return .keyword(.async)
      case .Sendable:
        return .keyword(.Sendable)
      case .unchecked:
        return .keyword(.unchecked)
      case ._local:
        return .keyword(._local)
      case ._noMetadata:
        return .keyword(._noMetadata)
      case ._opaqueReturnTypeOf:
        return .keyword(._opaqueReturnTypeOf)
      }
    }
  }
}
