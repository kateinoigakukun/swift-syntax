
//// Automatically Generated by generate-swiftparser
//// Do Not Edit Directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2022 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//


@_spi(RawSyntax) import SwiftSyntax

extension Parser {
  enum TypeAttribute: RawTokenKindSubset {
    case autoclosure
    
    case convention
    
    case noescape
    
    case escaping
    
    case differentiable
    
    case noDerivative
    
    case async
    
    case Sendable
    
    case unchecked
    
    case _local
    
    case _noMetadata
    
    case _opaqueReturnTypeOf
    
    init?(lexeme: Lexer.Lexeme) {
      switch lexeme {
      case RawTokenKindMatch(.autoclosure): 
        self = .autoclosure
      case RawTokenKindMatch(.convention): 
        self = .convention
      case RawTokenKindMatch(.noescape): 
        self = .noescape
      case RawTokenKindMatch(.escaping): 
        self = .escaping
      case RawTokenKindMatch(.differentiable): 
        self = .differentiable
      case RawTokenKindMatch(.noDerivative): 
        self = .noDerivative
      case RawTokenKindMatch(.async): 
        self = .async
      case RawTokenKindMatch(.Sendable): 
        self = .Sendable
      case RawTokenKindMatch(.unchecked): 
        self = .unchecked
      case RawTokenKindMatch(._local): 
        self = ._local
      case RawTokenKindMatch(._noMetadata): 
        self = ._noMetadata
      case RawTokenKindMatch(._opaqueReturnTypeOf): 
        self = ._opaqueReturnTypeOf
      default: 
        return nil
      }
    }
    
    var rawTokenKind: RawTokenKind {
      switch self {
      case .autoclosure: 
        return .keyword(.autoclosure)
      case .convention: 
        return .keyword(.convention)
      case .noescape: 
        return .keyword(.noescape)
      case .escaping: 
        return .keyword(.escaping)
      case .differentiable: 
        return .keyword(.differentiable)
      case .noDerivative: 
        return .keyword(.noDerivative)
      case .async: 
        return .keyword(.async)
      case .Sendable: 
        return .keyword(.Sendable)
      case .unchecked: 
        return .keyword(.unchecked)
      case ._local: 
        return .keyword(._local)
      case ._noMetadata: 
        return .keyword(._noMetadata)
      case ._opaqueReturnTypeOf: 
        return .keyword(._opaqueReturnTypeOf)
      }
    }
  }
}
