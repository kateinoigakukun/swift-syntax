//// Automatically generated by generate-swiftsyntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import SwiftSyntax
import SwiftParser
import SwiftParserDiagnostics

extension SyntaxParseable {
  public typealias StringInterpolation = SyntaxStringInterpolation
  
  public init(stringInterpolation: SyntaxStringInterpolation) {
    self = performParse(source: stringInterpolation.sourceText, parse: { parser in
      return Self.parse(from: &parser)
    })
  }
}

extension AccessorDeclSyntax: SyntaxExpressibleByStringInterpolation {}

extension AttributeSyntax: SyntaxExpressibleByStringInterpolation {}

extension CatchClauseSyntax: SyntaxExpressibleByStringInterpolation {}

extension ClosureParameterSyntax: SyntaxExpressibleByStringInterpolation {}

extension DeclSyntax: SyntaxExpressibleByStringInterpolation {}

extension EnumCaseParameterSyntax: SyntaxExpressibleByStringInterpolation {}

extension ExprSyntax: SyntaxExpressibleByStringInterpolation {}

extension FunctionParameterSyntax: SyntaxExpressibleByStringInterpolation {}

extension GenericParameterClauseSyntax: SyntaxExpressibleByStringInterpolation {}

extension MemberDeclBlockSyntax: SyntaxExpressibleByStringInterpolation {}

extension PatternSyntax: SyntaxExpressibleByStringInterpolation {}

extension SourceFileSyntax: SyntaxExpressibleByStringInterpolation {}

extension StmtSyntax: SyntaxExpressibleByStringInterpolation {}

extension SwitchCaseSyntax: SyntaxExpressibleByStringInterpolation {}

extension TypeSyntax: SyntaxExpressibleByStringInterpolation {}

// TODO: This should be inlined in SyntaxParseable.init(stringInterpolation:),
// but is currently used in `ConvenienceInitializers.swift`.
// See the corresponding TODO there.
func performParse<SyntaxType: SyntaxProtocol>(source: [UInt8], parse: (inout Parser) -> SyntaxType) -> SyntaxType {
  return source.withUnsafeBufferPointer { buffer in
    var parser = Parser(buffer)
    // FIXME: When the parser supports incremental parsing, put the
    // interpolatedSyntaxNodes in so we don't have to parse them again.
    let result = parse(&parser)
    return result
  }
}
